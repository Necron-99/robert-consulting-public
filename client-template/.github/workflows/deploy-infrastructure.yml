name: Deploy Infrastructure

on:
  push:
    paths:
      - 'infrastructure/**'
    branches:
      - main
  pull_request:
    paths:
      - 'infrastructure/**'
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      working-directory: infrastructure
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: infrastructure

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: infrastructure

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: infrastructure
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      script: |
        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
        <details><summary>Show Plan</summary>
        
        \`\`\`terraform
        ${process.env.PLAN}
        \`\`\`
        
        </details>
        
        *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
        
        await github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        });

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: infrastructure
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
