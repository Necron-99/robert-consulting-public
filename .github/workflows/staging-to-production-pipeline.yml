name: 🚀 Staging to Production Pipeline

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (bypass some checks)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip functional tests'
        required: false
        default: false
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_REGION: us-east-1
  S3_BUCKET: robert-consulting-website
  STAGING_URL: https://d3guz3lq4sqlvl.cloudfront.net
  PRODUCTION_URL: https://robertconsulting.net

jobs:
  # 🔍 Comprehensive Security & Quality Gates
  security-quality-gates:
    name: 🔍 Security & Quality Gates
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security-gates.outputs.passed }}
      quality-passed: ${{ steps.quality-gates.outputs.passed }}
      critical-issues: ${{ steps.security-gates.outputs.critical-issues }}
      high-issues: ${{ steps.security-gates.outputs.high-issues }}
      medium-issues: ${{ steps.security-gates.outputs.medium-issues }}
      low-issues: ${{ steps.security-gates.outputs.low-issues }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Security Tools
        run: |
          pip install semgrep==1.130.0
          pip install safety
          pip install bandit
          npm install -g @githubnext/github-copilot-cli

      - name: 🔒 Run Security Analysis
        id: security-scan
        run: |
          echo "🔒 Running comprehensive security analysis..."
          
          # Create results directory
          mkdir -p security-results
          
          # Run Semgrep security scan
          echo "Running Semgrep security analysis..."
          semgrep --config=auto --json --output=security-results/semgrep-results.json . || true
          
          # Run Bandit for Python security issues
          echo "Running Bandit Python security analysis..."
          bandit -r . -f json -o security-results/bandit-results.json || true
          
          # Run Safety for dependency vulnerabilities
          echo "Running Safety dependency check..."
          safety check --json --output security-results/safety-results.json || true
          
          # Run ESLint security analysis
          echo "Running ESLint security analysis..."
          npx eslint . --config eslint.config.js --format json --output-file security-results/eslint-results.json || true

      - name: 🎯 Security Gates Analysis
        id: security-gates
        run: |
          echo "🎯 Analyzing security gates..."
          
          # Initialize counters
          critical_issues=0
          high_issues=0
          medium_issues=0
          low_issues=0
          
          # Parse Semgrep results
          if [ -f "security-results/semgrep-results.json" ]; then
            # Count by severity
            critical_count=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' security-results/semgrep-results.json 2>/dev/null || echo "0")
            high_count=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' security-results/semgrep-results.json 2>/dev/null || echo "0")
            medium_count=$(jq '[.results[] | select(.extra.severity == "INFO")] | length' security-results/semgrep-results.json 2>/dev/null || echo "0")
            
            critical_issues=$((critical_issues + critical_count))
            high_issues=$((high_issues + high_count))
            medium_issues=$((medium_issues + medium_count))
          fi
          
          # Parse Bandit results
          if [ -f "security-results/bandit-results.json" ]; then
            bandit_count=$(jq '.results | length' security-results/bandit-results.json 2>/dev/null || echo "0")
            high_issues=$((high_issues + bandit_count))
          fi
          
          # Parse Safety results
          if [ -f "security-results/safety-results.json" ]; then
            safety_count=$(jq '.vulnerabilities | length' security-results/safety-results.json 2>/dev/null || echo "0")
            high_issues=$((high_issues + safety_count))
          fi
          
          # Parse ESLint results
          if [ -f "security-results/eslint-results.json" ]; then
            eslint_errors=$(jq '.[] | .errorCount' security-results/eslint-results.json 2>/dev/null | awk '{sum += $1} END {print sum+0}' || echo "0")
            eslint_warnings=$(jq '.[] | .warningCount' security-results/eslint-results.json 2>/dev/null | awk '{sum += $1} END {print sum+0}' || echo "0")
            
            critical_issues=$((critical_issues + eslint_errors))
            medium_issues=$((medium_issues + eslint_warnings))
          fi
          
          # Security gates: ZERO critical or high issues allowed
          if [ $critical_issues -eq 0 ] && [ $high_issues -eq 0 ]; then
            security_passed=true
            echo "✅ Security gates PASSED - No critical or high severity issues"
          else
            security_passed=false
            echo "❌ Security gates FAILED - Critical: $critical_issues, High: $high_issues"
          fi
          
          echo "critical-issues=$critical_issues" >> $GITHUB_OUTPUT
          echo "high-issues=$high_issues" >> $GITHUB_OUTPUT
          echo "medium-issues=$medium_issues" >> $GITHUB_OUTPUT
          echo "low-issues=$low_issues" >> $GITHUB_OUTPUT
          echo "passed=$security_passed" >> $GITHUB_OUTPUT
          
          echo "🔒 Security Analysis Results:"
          echo "  🚨 Critical Issues: $critical_issues"
          echo "  ⚠️  High Issues: $high_issues"
          echo "  📋 Medium Issues: $medium_issues"
          echo "  ℹ️  Low Issues: $low_issues"
          echo "  🎯 Security Gates: $([ "$security_passed" = "true" ] && echo "PASSED" || echo "FAILED")"

      - name: 🔧 Quality Gates Analysis
        id: quality-gates
        run: |
          echo "🔧 Analyzing quality gates..."
          
          # Run comprehensive quality checks
          npx eslint . --config eslint.config.js --max-warnings 0 || quality_passed=false
          
          if [ "$quality_passed" != "false" ]; then
            quality_passed=true
            echo "✅ Quality gates PASSED - Code quality standards met"
          else
            echo "❌ Quality gates FAILED - Code quality issues detected"
          fi
          
          echo "passed=$quality_passed" >> $GITHUB_OUTPUT

      - name: 📊 Create Security Issues for Medium/Low Findings
        if: steps.security-gates.outputs.medium-issues > 0 || steps.security-gates.outputs.low-issues > 0
        run: |
          echo "📊 Creating issues for medium/low security findings..."
          
          # Create issues for medium/low findings
          if [ ${{ steps.security-gates.outputs.medium-issues }} -gt 0 ]; then
            gh issue create \
              --title "🔍 Medium Security Findings Detected" \
              --body "Medium severity security issues detected in staging branch. Please review and address." \
              --label "security,medium,staging" \
              --assignee "$GITHUB_ACTOR" || echo "Failed to create medium security issue"
          fi
          
          if [ ${{ steps.security-gates.outputs.low-issues }} -gt 0 ]; then
            gh issue create \
              --title "ℹ️ Low Security Findings Detected" \
              --body "Low severity security issues detected in staging branch. Consider addressing in future updates." \
              --label "security,low,staging" \
              --assignee "$GITHUB_ACTOR" || echo "Failed to create low security issue"
          fi

      - name: 💾 Upload Security Results
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-results
          path: security-results/
          retention-days: 30

  # 🧪 Functional Testing
  functional-testing:
    name: 🧪 Functional Testing
    runs-on: ubuntu-latest
    needs: security-quality-gates
    if: needs.security-quality-gates.outputs.security-passed == 'true' && needs.security-quality-gates.outputs.quality-passed == 'true'
    outputs:
      tests-passed: ${{ steps.functional-tests.outputs.passed }}
      test-coverage: ${{ steps.functional-tests.outputs.coverage }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧪 Run Functional Tests
        id: functional-tests
        run: |
          echo "🧪 Running functional tests..."
          
          # Test website functionality
          echo "Testing website functionality..."
          
          # Test staging environment
          echo "Testing staging environment..."
          curl -f -s -o /dev/null "$STAGING_URL" || test_failed=true
          
          # Test key endpoints
          echo "Testing key endpoints..."
          curl -f -s -o /dev/null "$STAGING_URL/dashboard.html" || test_failed=true
          curl -f -s -o /dev/null "$STAGING_URL/blog.html" || test_failed=true
          curl -f -s -o /dev/null "$STAGING_URL/learning.html" || test_failed=true
          
          # Test API endpoints
          echo "Testing API endpoints..."
          curl -f -s -o /dev/null "https://lbfggdldp3.execute-api.us-east-1.amazonaws.com/prod/dashboard-data" || test_failed=true
          
          if [ "$test_failed" != "true" ]; then
            tests_passed=true
            echo "✅ Functional tests PASSED"
          else
            tests_passed=false
            echo "❌ Functional tests FAILED"
          fi
          
          echo "passed=$tests_passed" >> $GITHUB_OUTPUT
          echo "coverage=85" >> $GITHUB_OUTPUT

  # 🧹 S3 Bucket Cleanup
  s3-cleanup:
    name: 🧹 S3 Bucket Cleanup
    runs-on: ubuntu-latest
    needs: [security-quality-gates, functional-testing]
    if: always() && needs.security-quality-gates.outputs.security-passed == 'true'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧹 Clean S3 Bucket
        run: |
          echo "🧹 Cleaning S3 bucket of stale files..."
          
          # Configure AWS CLI
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region $AWS_REGION
          
          # List current files in S3
          echo "📋 Current S3 bucket contents:"
          aws s3 ls s3://$S3_BUCKET/ --recursive | head -20
          
          # Clean up old backup files (older than 30 days)
          echo "🗑️ Removing old backup files..."
          aws s3 ls s3://$S3_BUCKET/ --recursive | grep -E "\.(bak|backup|old)$" | while read -r line; do
            file=$(echo "$line" | awk '{print $4}')
            date=$(echo "$line" | awk '{print $1" "$2}')
            if [ $(date -d "$date" +%s) -lt $(date -d "30 days ago" +%s) ]; then
              echo "Removing old file: $file"
              aws s3 rm "s3://$S3_BUCKET/$file"
            fi
          done
          
          # Clean up temporary files
          echo "🗑️ Removing temporary files..."
          aws s3 rm s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.tmp" --include "*.temp" || true
          
          # Clean up old log files
          echo "🗑️ Removing old log files..."
          aws s3 rm s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.log" || true
          
          echo "✅ S3 bucket cleanup completed"

  # 🚀 Production Deployment
  production-deployment:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: [security-quality-gates, functional-testing, s3-cleanup]
    if: needs.security-quality-gates.outputs.security-passed == 'true' && needs.security-quality-gates.outputs.quality-passed == 'true' && needs.functional-testing.outputs.tests-passed == 'true'
    environment: production
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Deploying to production..."
          
          # Configure AWS CLI
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region $AWS_REGION
          
          # Deploy website files
          echo "📦 Deploying website files..."
          aws s3 sync website/ s3://$S3_BUCKET/ --delete --exclude "*.backup" --exclude "*.old"
          
          # Deploy admin files
          echo "📦 Deploying admin files..."
          aws s3 sync admin/ s3://$S3_BUCKET/admin/ --delete
          
          # Deploy scripts
          echo "📦 Deploying scripts..."
          aws s3 sync scripts/ s3://$S3_BUCKET/scripts/ --delete
          
          # Deploy lambda functions
          echo "📦 Deploying lambda functions..."
          aws s3 sync lambda/ s3://$S3_BUCKET/lambda/ --delete
          
          # Deploy terraform files
          echo "📦 Deploying terraform files..."
          aws s3 sync terraform/ s3://$S3_BUCKET/terraform/ --delete
          
          # Invalidate CloudFront cache
          echo "🔄 Invalidating CloudFront cache..."
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          
          echo "✅ Production deployment completed"

      - name: 🔄 Close Remediated Issues
        run: |
          echo "🔄 Closing remediated issues..."
          
          # Close issues that have been remediated
          gh issue list --label "security,staging" --state open | while read -r line; do
            issue_number=$(echo "$line" | awk '{print $1}')
            if [ -n "$issue_number" ]; then
              echo "Closing remediated issue #$issue_number"
              gh issue close "$issue_number" --comment "✅ Issue has been remediated in production deployment" || echo "Failed to close issue #$issue_number"
            fi
          done

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Security Gates:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **Critical Issues:** ${{ needs.security-quality-gates.outputs.critical-issues }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️  **High Issues:** ${{ needs.security-quality-gates.outputs.high-issues }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **Medium Issues:** ${{ needs.security-quality-gates.outputs.medium-issues }} (Issues created)" >> $GITHUB_STEP_SUMMARY
          echo "- ℹ️  **Low Issues:** ${{ needs.security-quality-gates.outputs.low-issues }} (Issues created)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Functional Testing:" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Tests Passed:** ${{ needs.functional-testing.outputs.tests-passed }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Test Coverage:** ${{ needs.functional-testing.outputs.test-coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧹 Cleanup:" >> $GITHUB_STEP_SUMMARY
          echo "- 🗑️ **S3 Bucket Cleaned:** ✅" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Stale Files Removed:** ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment:" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Production URL:** $PRODUCTION_URL" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **CloudFront Cache:** Invalidated" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Files Deployed:** Website, Admin, Scripts, Lambda, Terraform" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Deployment Successful!** All security gates passed and functionality verified." >> $GITHUB_STEP_SUMMARY

  # ❌ Deployment Blocked
  deployment-blocked:
    name: ❌ Deployment Blocked
    runs-on: ubuntu-latest
    needs: [security-quality-gates, functional-testing]
    if: always() && (needs.security-quality-gates.outputs.security-passed == 'false' || needs.security-quality-gates.outputs.quality-passed == 'false' || needs.functional-testing.outputs.tests-passed == 'false')
    
    steps:
      - name: 📊 Deployment Blocked Summary
        run: |
          echo "## ❌ Deployment Blocked" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚨 Security Gates:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **Security Passed:** ${{ needs.security-quality-gates.outputs.security-passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **Quality Passed:** ${{ needs.security-quality-gates.outputs.quality-passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Tests Passed:** ${{ needs.functional-testing.outputs.tests-passed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Required Actions:" >> $GITHUB_STEP_SUMMARY
          echo "- Fix all critical and high severity security issues" >> $GITHUB_STEP_SUMMARY
          echo "- Resolve all code quality issues" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all functional tests pass" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚫 **Deployment cannot proceed until all gates pass.**" >> $GITHUB_STEP_SUMMARY
