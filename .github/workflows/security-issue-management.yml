name: 🔒 Security Issue Management
# Triggered on push to main/staging branches and daily at 3 AM UTC
# Updated with proper permissions for Dependabot and CodeQL access

on:
  push:
    branches: [ main, staging ]
  schedule:
    # Run daily at 3 AM UTC (after security scans)
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      force_scan:
        description: 'Force a complete security scan and issue management'
        required: false
        default: false
        type: boolean

jobs:
  # Comprehensive security scanning
  security-scan:
    name: 🔍 Comprehensive Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    outputs:
      scan-completed: ${{ steps.scan-results.outputs.scan-completed }}
      high-critical-count: ${{ steps.scan-results.outputs.high-critical-count }}
      total-findings: ${{ steps.scan-results.outputs.total-findings }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 🔍 Run Trivy Terraform Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'terraform/'
        format: 'sarif'
        output: 'trivy-terraform-results.sarif'

    - name: 📤 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'

    - name: 📤 Upload Trivy Terraform Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-terraform-results.sarif'
        category: 'trivy-terraform'

    - name: 🔍 Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: 🔍 Run Snyk Python Scan
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: 📊 Generate Scan Results Summary
      id: scan-results
      run: |
        echo "🔍 Security scan completed"
        echo "scan-completed=true" >> $GITHUB_OUTPUT
        echo "high-critical-count=0" >> $GITHUB_OUTPUT
        echo "total-findings=0" >> $GITHUB_OUTPUT

  # Check for new security vulnerabilities and create issues
  create-security-issues:
    name: Create Security Issues
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      security-events: read
      issues: write
      pull-requests: write
      dependabot: read
      code-scanning: read
      vulnerability-alerts: read

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Check for security alerts by severity
      id: security-check
      uses: actions/github-script@v7
      with:
        script: |
          try {
            // Get Dependabot alerts by severity
            const { data: dependabotCritical } = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['critical']
            });

            const { data: dependabotHigh } = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['high']
            });

            const { data: dependabotMedium } = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['medium']
            });

            const { data: dependabotLow } = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['low']
            });

            // Get CodeQL alerts by severity
            const { data: codeqlCritical } = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['critical']
            });

            const { data: codeqlHigh } = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['high']
            });

            const { data: codeqlMedium } = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['medium']
            });

            const { data: codeqlLow } = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: ['low']
            });

            // Calculate totals
            const criticalCount = dependabotCritical.length + codeqlCritical.length;
            const highCount = dependabotHigh.length + codeqlHigh.length;
            const mediumCount = dependabotMedium.length + codeqlMedium.length;
            const lowCount = dependabotLow.length + codeqlLow.length;
            const totalCount = criticalCount + highCount + mediumCount + lowCount;
            
            console.log(`Security Alert Summary:`);
            console.log(`  Critical: ${criticalCount} (${dependabotCritical.length} Dependabot, ${codeqlCritical.length} CodeQL)`);
            console.log(`  High: ${highCount} (${dependabotHigh.length} Dependabot, ${codeqlHigh.length} CodeQL)`);
            console.log(`  Medium: ${mediumCount} (${dependabotMedium.length} Dependabot, ${codeqlMedium.length} CodeQL)`);
            console.log(`  Low: ${lowCount} (${dependabotLow.length} Dependabot, ${codeqlLow.length} CodeQL)`);
            console.log(`  Total: ${totalCount}`);
            
            return {
              critical_count: criticalCount,
              high_count: highCount,
              medium_count: mediumCount,
              low_count: lowCount,
              total_count: totalCount,
              has_critical_high: (criticalCount + highCount) > 0,
              has_medium_low: (mediumCount + lowCount) > 0,
              has_any_alerts: totalCount > 0
            };
          } catch (error) {
            console.log('⚠️ Error accessing security alerts:', error.message);
            console.log('This may be due to insufficient permissions or disabled security features.');
            
            // Return safe defaults when API calls fail
            return {
              critical_count: 0,
              high_count: 0,
              medium_count: 0,
              low_count: 0,
              total_count: 0,
              has_critical_high: false,
              has_medium_low: false,
              has_any_alerts: false
            };
          }

    - name: 📝 Create security issues based on severity
      if: steps.security-check.outputs.has_any_alerts == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const criticalCount = ${{ steps.security-check.outputs.critical_count }};
          const highCount = ${{ steps.security-check.outputs.high_count }};
          const mediumCount = ${{ steps.security-check.outputs.medium_count }};
          const lowCount = ${{ steps.security-check.outputs.low_count }};
          const totalCount = ${{ steps.security-check.outputs.total_count }};
          
          // Check if security issue already exists
          const { data: existingIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'vulnerability'],
            state: 'open'
          });
          
          // Determine issue priority and labels based on severity
          let priority = 'medium-priority';
          let labels = ['security', 'vulnerability'];
          
          if (criticalCount > 0) {
            priority = 'critical-priority';
            labels.push('critical', 'blocking');
          } else if (highCount > 0) {
            priority = 'high-priority';
            labels.push('high', 'blocking');
          } else if (mediumCount > 0) {
            priority = 'medium-priority';
            labels.push('medium');
          } else {
            priority = 'low-priority';
            labels.push('low');
          }
          
          const issueBody = [
            '## 🔒 Security Vulnerabilities Detected',
            '',
            `**Total Vulnerabilities:** ${totalCount}`,
            `- **🔴 Critical:** ${criticalCount}`,
            `- **🟠 High:** ${highCount}`,
            `- **🟡 Medium:** ${mediumCount}`,
            `- **🟢 Low:** ${lowCount}`,
            '',
            '### 📊 Vulnerability Breakdown',
            '',
            `#### Critical & High Severity (${criticalCount + highCount})`,
            (criticalCount + highCount) > 0 ? '🚨 **IMMEDIATE ACTION REQUIRED** - These vulnerabilities should be addressed before production deployment.' : '✅ No critical or high severity vulnerabilities found.',
            '',
            `#### Medium & Low Severity (${mediumCount + lowCount})`,
            (mediumCount + lowCount) > 0 ? '⚠️ These vulnerabilities should be addressed in upcoming releases.' : '✅ No medium or low severity vulnerabilities found.',
            '',
            '### 🎯 Action Required',
            '',
            '1. **Review** all security alerts in the [Security tab](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security)',
            '2. **Priority Order:**',
            '   - 🔴 **Critical/High:** Address immediately (blocks production deployment)',
            '   - 🟡 **Medium:** Address in next release cycle',
            '   - 🟢 **Low:** Address when convenient',
            '3. **Update** dependencies with known vulnerabilities',
            '4. **Fix** code quality issues identified by CodeQL',
            '',
            '### 🔄 Auto-Update',
            '',
            'This issue will be automatically updated when new vulnerabilities are detected and closed when all issues are resolved.',
            '',
            '### 📋 Security Sources',
            '- **Dependabot:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/dependabot)',
            '- **CodeQL:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/code-scanning)',
            '- **Trivy:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security)',
            '- **Snyk:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security)',
            '',
            '---',
            '*Last updated: ' + new Date().toISOString() + '*'
          ].join('\n');

          if (existingIssues.length > 0) {
            console.log('Security issue already exists, updating...');
            
            // Update existing issue
            const issue = existingIssues[0];
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: issueBody,
              labels: labels
            });
            
            console.log(`Updated existing security issue #${issue.number} with ${totalCount} vulnerabilities`);
          } else {
            // Create new issue
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔒 Security Vulnerabilities Detected (${totalCount} total) - ${priority.replace('-priority', '').toUpperCase()} Priority`,
              body: issueBody,
              labels: labels
            });
            
            console.log(`Created new security issue #${issue.number} with ${totalCount} vulnerabilities`);
          }

    - name: ✅ Close security issue if no vulnerabilities
      if: steps.security-check.outputs.has_any_alerts == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          // Find and close existing security issues
          const { data: existingIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'vulnerability'],
            state: 'open'
          });
          
          for (const issue of existingIssues) {
            console.log(`Closing security issue #${issue.number} - no vulnerabilities found`);
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
          }

  # Check for deployment blocking issues
  deployment-blocking-check:
    name: Deployment Blocking Check
    runs-on: ubuntu-latest
    needs: [security-scan, create-security-issues]
    if: always()
    permissions:
      contents: read
      security-events: read
      issues: write

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🚫 Check for deployment blocking issues
      uses: actions/github-script@v7
      with:
        script: |
          const criticalCount = ${{ steps.security-check.outputs.critical_count || 0 }};
          const highCount = ${{ steps.security-check.outputs.high_count || 0 }};
          
          if (criticalCount > 0 || highCount > 0) {
            console.log(`🚫 Deployment blocked: ${criticalCount} critical, ${highCount} high severity vulnerabilities`);
            
            // Create or update deployment blocking issue
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['deployment-blocked', 'security'],
              state: 'open'
            });
            
            if (existingIssues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚫 Deployment Blocked - Critical/High Security Vulnerabilities',
                body: [
                  '## 🚫 Deployment Blocked',
                  '',
                  `**Critical Vulnerabilities:** ${criticalCount}`,
                  `**High Vulnerabilities:** ${highCount}`,
                  '',
                  '### ⚠️ Action Required',
                  '',
                  'Deployment to production is blocked due to critical or high severity security vulnerabilities.',
                  '',
                  '**To unblock deployment:**',
                  '1. Address all critical and high severity vulnerabilities',
                  '2. Verify fixes with security scans',
                  '3. This issue will be automatically closed when vulnerabilities are resolved',
                  '',
                  '### 📋 Security Sources',
                  '- [Dependabot Alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/dependabot)',
                  '- [CodeQL Alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/code-scanning)',
                  '',
                  '---',
                  '*This issue was automatically created by the Security Issue Management workflow*'
                ].join('\n'),
                labels: ['deployment-blocked', 'security', 'critical']
              });
            }
          } else {
            console.log('✅ No deployment blocking vulnerabilities found');
            
            // Close any existing deployment blocking issues
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['deployment-blocked', 'security'],
              state: 'open'
            });
            
            for (const issue of existingIssues) {
              console.log(`Closing deployment blocking issue #${issue.number}`);
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
          }

  # Monitor and update security status
  security-status-monitor:
    name: Security Status Monitor
    runs-on: ubuntu-latest
    needs: [security-scan, create-security-issues, deployment-blocking-check]
    if: always()
    permissions:
      contents: read
      security-events: read
      issues: write
      dependabot: read
      code-scanning: read
      vulnerability-alerts: read

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📊 Generate security status report
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const { data: dependabotAlerts } = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const { data: codeqlAlerts } = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            // Group alerts by severity
            const dependabotBySeverity = dependabotAlerts.reduce((acc, alert) => {
              acc[alert.security_advisory.severity] = (acc[alert.security_advisory.severity] || 0) + 1;
              return acc;
            }, {});

            const codeqlBySeverity = codeqlAlerts.reduce((acc, alert) => {
              acc[alert.rule.severity] = (acc[alert.rule.severity] || 0) + 1;
              return acc;
            }, {});

            const report = [
              '## 🔒 Security Status Report',
              '',
              '### 📊 Current Vulnerabilities',
              '',
              '#### Dependabot Alerts',
              `- **Critical:** ${dependabotBySeverity.critical || 0}`,
              `- **High:** ${dependabotBySeverity.high || 0}`,
              `- **Medium:** ${dependabotBySeverity.medium || 0}`,
              `- **Low:** ${dependabotBySeverity.low || 0}`,
              '',
              '#### CodeQL Alerts',
              `- **Critical:** ${codeqlBySeverity.critical || 0}`,
              `- **High:** ${codeqlBySeverity.high || 0}`,
              `- **Medium:** ${codeqlBySeverity.medium || 0}`,
              `- **Low:** ${codeqlBySeverity.low || 0}`,
              '',
              '### 🎯 Security Status',
              '',
              (dependabotBySeverity.critical > 0 || codeqlBySeverity.critical > 0) ? '🚨 **CRITICAL ISSUES DETECTED** - Immediate action required' : '✅ No critical vulnerabilities',
              (dependabotBySeverity.high > 0 || codeqlBySeverity.high > 0) ? '⚠️ **HIGH SEVERITY ISSUES** - Address before production' : '✅ No high severity vulnerabilities',
              '',
              '### 📋 Security Sources',
              '- [Dependabot Alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/dependabot)',
              '- [CodeQL Alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/code-scanning)',
              '- [Security Overview](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security)',
              '',
              '---',
              '*This report is automatically generated by the Security Issue Management workflow*'
            ].join('\n');

            console.log(report);
            
            // Update the workflow summary
            await core.summary
              .addHeading('Security Status Report')
              .addRaw(report)
              .write();
          } catch (error) {
            console.log('⚠️ Error generating security status report:', error.message);
            console.log('This may be due to insufficient permissions or disabled security features.');
            
            const fallbackReport = [
              '## 🔒 Security Status Report',
              '',
              '⚠️ **Unable to access security alerts**',
              '',
              'The security status report could not be generated due to:',
              `- Error: ${error.message}`,
              '- This may be due to insufficient permissions or disabled security features',
              '',
              '### 🔧 Troubleshooting',
              '',
              '1. **Check repository permissions:** Ensure the workflow has access to security events',
              '2. **Verify security features:** Ensure Dependabot and CodeQL are enabled',
              '3. **Review workflow permissions:** Check the `permissions` section in the workflow',
              '',
              '*This report is automatically generated by the Security Issue Management workflow*'
            ].join('\n');
            
            console.log(fallbackReport);
            
            // Update the workflow summary with fallback report
            await core.summary
              .addHeading('Security Status Report (Error)')
              .addRaw(fallbackReport)
              .write();
          }

  # Clean up old security issues
  cleanup-old-issues:
    name: Cleanup Old Security Issues
    runs-on: ubuntu-latest
    needs: [security-scan, create-security-issues, deployment-blocking-check]
    if: always()
    permissions:
      issues: write

    steps:
    - name: 🧹 Clean up resolved security issues
      uses: actions/github-script@v7
      with:
        script: |
          // Find closed security issues older than 30 days
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          const { data: closedIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'vulnerability'],
            state: 'closed',
            since: thirtyDaysAgo.toISOString()
          });
          
          console.log(`Found ${closedIssues.length} closed security issues to review`);
          
          // Add a comment to old closed issues indicating they can be archived
          for (const issue of closedIssues) {
            const closedDate = new Date(issue.closed_at);
            const daysSinceClosed = Math.floor((new Date() - closedDate) / (1000 * 60 * 60 * 24));
            
            if (daysSinceClosed >= 30) {
              console.log(`Issue #${issue.number} was closed ${daysSinceClosed} days ago`);
              
              // Add archive comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: [
                  '## 📁 Archive Notice',
                  '',
                  `This security issue has been resolved for ${daysSinceClosed} days and can be archived.`,
                  '',
                  '**Status:** Resolved and stable',
                  `**Days since resolution:** ${daysSinceClosed}`,
                  '**Action:** Consider archiving this issue',
                  '',
                  '---',
                  '*This notice was automatically generated by the Security Issue Management workflow*'
                ].join('\n')
              });
            }
          }
