name: üîÑ Simple Hybrid Security Management

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      severity_filter:
        description: 'Minimum severity to process'
        required: true
        default: 'high'
        type: choice
        options:
          - critical
          - high
          - medium
          - low
  push:
    branches: [main, staging]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Monitor Code Scanning alerts and create Issues for critical/high findings
  code-scanning-monitor:
    name: üîç Monitor Code Scanning Alerts
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: read
      issues: write
      pull-requests: read

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üîç Get Code Scanning Alerts
        id: get-alerts
        run: |
          echo "üîç Fetching Code Scanning alerts..."
          
          # Get code scanning results (SARIF uploads)
          gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open")' > sarif-alerts.json
          
          echo "üìä Found $(jq length sarif-alerts.json) SARIF alerts"

      - name: üéØ Process Critical/High Findings
        id: process-findings
        run: |
          echo "üéØ Processing critical and high severity findings..."
          
          # Set minimum severity (default: high)
          MIN_SEVERITY="${{ github.event.inputs.severity_filter || 'high' }}"
          
          # Process SARIF alerts (Trivy, Semgrep, etc.)
          if [ -f "sarif-alerts.json" ] && [ "$(jq length sarif-alerts.json)" -gt 0 ]; then
            echo "üîç Processing SARIF alerts..."
            
            # Filter for critical/high severity and group by rule
            jq -r --arg min_severity "$MIN_SEVERITY" '
              group_by(.rule.name) | 
              map(select(.[0].rule.severity as $sev | 
                ($sev == "CRITICAL" or $sev == "ERROR") or 
                ($min_severity == "high" and $sev == "WARNING") or
                ($min_severity == "medium" and ($sev == "WARNING" or $sev == "NOTE")) or
                ($min_severity == "low")
              )) |
              .[] | 
              {
                rule_name: .[0].rule.name,
                severity: .[0].rule.severity,
                count: length,
                files: [.[] | .most_recent_instance.location.physical_location.artifact_location.uri] | unique,
                first_seen: (.[] | .created_at) | min,
                last_seen: (.[] | .created_at) | max,
                tool: .[0].tool.name,
                description: .[0].rule.description
              }
            ' sarif-alerts.json > processed-findings.json
            
            echo "üìä Processed $(jq length processed-findings.json) unique findings"
          fi

      - name: ü§ñ Create Issues for Critical/High Findings
        run: |
          echo "ü§ñ Creating Issues for critical/high findings..."
          
          if [ -f "processed-findings.json" ] && [ "$(jq length processed-findings.json)" -gt 0 ]; then
            jq -r '.[]' processed-findings.json | while read -r finding; do
              rule_name=$(echo "$finding" | jq -r '.rule_name')
              severity=$(echo "$finding" | jq -r '.severity')
              count=$(echo "$finding" | jq -r '.count')
              tool=$(echo "$finding" | jq -r '.tool')
              description=$(echo "$finding" | jq -r '.description')
              files=$(echo "$finding" | jq -r '.files | join(", ")')
              
              # Check if issue already exists for this rule
              existing_issue=$(gh issue list --search "in:title \"$rule_name\"" --state open --json number --jq '.[0].number // empty')
              
              if [ -z "$existing_issue" ]; then
                echo "üìù Creating issue for: $rule_name ($severity)"
                
                # Create simple issue body
                issue_title="üîí $severity: $rule_name"
                issue_body="**Rule:** \`$rule_name\`
**Severity:** \`$severity\`
**Tool:** $tool
**Occurrences:** $count
**Files Affected:** $files

**Description:**
$description

**Remediation Steps:**
- [ ] Review the affected files
- [ ] Implement recommended security fixes
- [ ] Test changes in staging environment
- [ ] Deploy to production after validation

---
*This issue was automatically created from Code Scanning alerts by the Hybrid Security Management System*"
                
                # Create the issue
                gh issue create \
                  --title "$issue_title" \
                  --body "$issue_body" \
                  --label "security,$severity,$tool,automated" \
                  --assignee "$GITHUB_ACTOR" || echo "‚ö†Ô∏è Failed to create issue for $rule_name"
              else
                echo "‚ÑπÔ∏è Issue already exists for $rule_name (#$existing_issue)"
              fi
            done
          fi

      - name: üìä Generate Security Summary
        run: |
          echo "üìä Security Management Summary:"
          echo "================================"
          
          if [ -f "processed-findings.json" ]; then
            total_findings=$(jq length processed-findings.json)
            critical_findings=$(jq '[.[] | select(.severity == "CRITICAL" or .severity == "ERROR")] | length' processed-findings.json)
            high_findings=$(jq '[.[] | select(.severity == "WARNING")] | length' processed-findings.json)
            
            echo "üîç Total Unique Findings: $total_findings"
            echo "üö® Critical/Error Findings: $critical_findings"
            echo "‚ö†Ô∏è High/Warning Findings: $high_findings"
            echo ""
            echo "üìã Findings by Tool:"
            jq -r 'group_by(.tool) | .[] | "- \(.[0].tool): \(length) findings"' processed-findings.json
          fi
          
          echo ""
          echo "üìà Open Security Issues:"
          gh issue list --label "security" --state open --json number,title,labels | jq -r '.[] | "- #\(.number): \(.title)"'
