name: OWASP ZAP Security Scan

on:
  push:
    branches: [ main ]
    paths:
      - 'website/**'
      - 'admin/**'
      - '.github/workflows/owasp-zap-security-scan.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'website/**'
      - 'admin/**'
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to scan (default: https://robertconsulting.net)'
        required: false
        default: 'https://robertconsulting.net'

env:
  STAGING_URL: 'http://robert-consulting-testing-site.s3-website-us-east-1.amazonaws.com'
  TARGET_URL: ${{ github.event.inputs.target_url || 'https://robertconsulting.net' }}

jobs:
  zap-baseline-scan:
    name: OWASP ZAP Baseline Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy website to staging for scanning
        run: |
          echo "🧪 Deploying to staging site for ZAP scanning..."
          aws s3 sync website/ s3://robert-consulting-testing-site --delete
          echo "✅ Staging deployment completed"

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for staging deployment to be ready..."
          sleep 30
          echo "✅ Staging site should be ready for scanning"

      - name: Run OWASP ZAP Baseline Scan
        run: |
          echo "🔍 Running OWASP ZAP Baseline Scan..."
          
          # Create reports directory
          mkdir -p reports
          chmod 777 reports
          
          # Set target URL
          TARGET_URL="${{ env.STAGING_URL }}"
          echo "🎯 Target URL: $TARGET_URL"
          
          # Pull the working ZAP image
          echo "📦 Pulling ZAP Docker image..."
          docker pull ghcr.io/zaproxy/zaproxy:stable
          
          # Run ZAP baseline scan
          echo "🔍 Running ZAP baseline scan..."
          if docker run --rm \
            -v $(pwd)/reports:/zap/wrk/:rw \
            -v $(pwd)/reports:/home/zap/:rw \
            --user root \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t "$TARGET_URL" \
            -J baseline-report.json \
            -r baseline-report.html \
            -x baseline-report.xml \
            -a; then
            ZAP_EXIT_CODE=0
            echo "📊 ZAP scan completed successfully with exit code: $ZAP_EXIT_CODE"
          else
            ZAP_EXIT_CODE=$?
            echo "📊 ZAP scan completed with exit code: $ZAP_EXIT_CODE"
          fi
          
          # ZAP exit codes: 0=no issues, 1=low, 2=medium, 3=high risk
          # All of these are SUCCESSFUL scans with findings, not failures
          if [ $ZAP_EXIT_CODE -eq 0 ]; then
            echo "✅ No security issues found"
          elif [ $ZAP_EXIT_CODE -eq 1 ]; then
            echo "⚠️ Low risk security issues found (scan successful)"
          elif [ $ZAP_EXIT_CODE -eq 2 ]; then
            echo "⚠️ Medium risk security issues found (scan successful)"
          elif [ $ZAP_EXIT_CODE -eq 3 ]; then
            echo "⚠️ High risk security issues found (scan successful)"
          else
            echo "❌ ZAP scan failed with unexpected exit code: $ZAP_EXIT_CODE"
            exit 1  # Only fail on unexpected exit codes
          fi
          
          # Check if reports were generated
          echo "📄 Checking for generated reports..."
          if [ -f "reports/baseline-report.json" ]; then
            echo "✅ JSON report generated"
          fi
          if [ -f "reports/baseline-report.html" ]; then
            echo "✅ HTML report generated"
          fi
          if [ -f "reports/baseline-report.xml" ]; then
            echo "✅ XML report generated"
          fi
          
          # List all files in reports directory
          echo "📁 Files in reports directory:"
          ls -la reports/ || echo "❌ Reports directory not accessible"
          
          # Copy reports to root directory for artifact upload
          cp reports/*.json . 2>/dev/null || echo "⚠️ No JSON reports to copy"
          cp reports/*.html . 2>/dev/null || echo "⚠️ No HTML reports to copy"
          cp reports/*.xml . 2>/dev/null || echo "⚠️ No XML reports to copy"
          
          echo "📋 ZAP baseline scan summary:"
          echo "Target: $TARGET_URL"
          echo "Exit Code: $ZAP_EXIT_CODE (scan completed successfully)"
          echo "Reports: Available in artifacts"
          
          # Always exit with 0 for expected ZAP exit codes (0-3)
          # This prevents GitHub Actions from treating security findings as failures
          exit 0

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-baseline-reports
          path: |
            *.html
            *.json
            *.xml
            *.sarif
          retention-days: 30
        continue-on-error: true

      - name: Upload ZAP results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('*.sarif') != ''
        with:
          sarif_file: '*.sarif'
        continue-on-error: true

      - name: Create GitHub Issues for Security Findings
        if: always()
        run: |
          echo "🔍 Checking for security findings to create issues..."
          
          # Check if any report files exist
          if find . -name "*.html" -o -name "*.json" -o -name "*.sarif" | grep -q .; then
            echo "📄 Security scan reports found"
            
            # Create a general security scan issue
            ISSUE_TITLE="🔒 OWASP ZAP Security Scan - $(date +%Y-%m-%d)"
            ISSUE_BODY="## Security Scan Results

          **Scan Date:** $(date -u)
          **Target URL:** ${{ env.STAGING_URL }}
          **Scan Type:** Baseline

          ### Scan Status
          ✅ Security scan completed successfully
          📄 Reports generated and uploaded as artifacts

          ### Artifacts Available
          - HTML Report: Available in workflow artifacts
          - JSON Report: Available in workflow artifacts  
          - SARIF Report: Available in workflow artifacts (if generated)

          ### Next Steps
          1. Review the uploaded artifacts for detailed scan results
          2. Check the GitHub Security tab for SARIF results (if code scanning is enabled)
          3. Address any security findings identified in the scan

          ### Workflow Information
          - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - **Commit:** ${{ github.sha }}
          - **Branch:** ${{ github.ref_name }}"
            
            # Check if an issue with this title already exists
            EXISTING_ISSUE=$(gh issue list --search "in:title $ISSUE_TITLE" --json number --jq '.[0].number' 2>/dev/null || echo "")
            
            if [ -z "$EXISTING_ISSUE" ]; then
              echo "📝 Creating GitHub issue for security scan results..."
              # Create issue with labels
              if gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY" --label "security,automated-scan" 2>/dev/null; then
                echo "✅ GitHub issue created successfully with labels"
              else
                echo "⚠️ Failed to create issue with labels - trying without labels..."
                # Try without labels if the first attempt failed
                if gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY" 2>/dev/null; then
                  echo "✅ GitHub issue created successfully without labels"
                else
                  echo "❌ Failed to create issue (check GitHub CLI permissions)"
                fi
              fi
            else
              echo "📝 Issue already exists: #$EXISTING_ISSUE"
            fi
          else
            echo "⚠️ No security scan reports found, skipping issue creation"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Security Summary
        if: always()
        run: |
          echo "## 🔒 OWASP ZAP Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Scanned:** ${{ env.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** Baseline" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports Available:" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Report: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- JSON Report: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- SARIF Report: Uploaded to GitHub Security tab (if code scanning enabled)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Code Scanning Setup:" >> $GITHUB_STEP_SUMMARY
          echo "To enable SARIF uploads to GitHub Security tab:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Settings → Security → Code scanning" >> $GITHUB_STEP_SUMMARY
          echo "2. Click Set up code scanning" >> $GITHUB_STEP_SUMMARY
          echo "3. Choose Advanced → Upload SARIF file" >> $GITHUB_STEP_SUMMARY
          echo "4. This will enable the Security tab integration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Job summary generated at run-time*" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup staging deployment
        if: always()
        run: |
          echo "🧹 Cleaning up staging deployment..."
          # Optional: Remove staging files if needed
          echo "✅ Cleanup completed"

  zap-api-scan:
    name: OWASP ZAP API Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP API Scan
        run: |
          echo "🔍 Running OWASP ZAP API Scan..."
          
          # Create reports directory
          mkdir -p reports
          chmod 777 reports
          
          # Set target URL
          TARGET_URL="${{ env.TARGET_URL }}"
          echo "🎯 Target URL: $TARGET_URL"
          
          # Pull the working ZAP image
          echo "📦 Pulling ZAP Docker image..."
          docker pull ghcr.io/zaproxy/zaproxy:stable
          
          # Run ZAP baseline scan for API endpoints (since we don't have OpenAPI spec)
          echo "🔍 Running ZAP baseline scan for API endpoints..."
          if docker run --rm \
            -v $(pwd)/reports:/zap/wrk/:rw \
            -v $(pwd)/reports:/home/zap/:rw \
            --user root \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t "$TARGET_URL" \
            -J api-report.json \
            -r api-report.html \
            -x api-report.xml \
            -a; then
            ZAP_EXIT_CODE=0
            echo "📊 ZAP API scan completed successfully with exit code: $ZAP_EXIT_CODE"
          else
            ZAP_EXIT_CODE=$?
            echo "📊 ZAP API scan completed with exit code: $ZAP_EXIT_CODE"
          fi
          
          # ZAP exit codes: 0=no issues, 1=low, 2=medium, 3=high risk
          # All of these are SUCCESSFUL scans with findings, not failures
          if [ $ZAP_EXIT_CODE -eq 0 ]; then
            echo "✅ No security issues found"
          elif [ $ZAP_EXIT_CODE -eq 1 ]; then
            echo "⚠️ Low risk security issues found (scan successful)"
          elif [ $ZAP_EXIT_CODE -eq 2 ]; then
            echo "⚠️ Medium risk security issues found (scan successful)"
          elif [ $ZAP_EXIT_CODE -eq 3 ]; then
            echo "⚠️ High risk security issues found (scan successful)"
          else
            echo "❌ ZAP API scan failed with unexpected exit code: $ZAP_EXIT_CODE"
            exit 1  # Only fail on unexpected exit codes
          fi
          
          # Check if reports were generated
          echo "📄 Checking for generated API reports..."
          if [ -f "reports/api-report.json" ]; then
            echo "✅ JSON report generated"
          fi
          if [ -f "reports/api-report.html" ]; then
            echo "✅ HTML report generated"
          fi
          if [ -f "reports/api-report.xml" ]; then
            echo "✅ XML report generated"
          fi
          
          # List all files in reports directory
          echo "📁 Files in reports directory:"
          ls -la reports/ || echo "❌ Reports directory not accessible"
          
          # Copy reports to root directory for artifact upload
          cp reports/*.json . 2>/dev/null || echo "⚠️ No JSON reports to copy"
          cp reports/*.html . 2>/dev/null || echo "⚠️ No HTML reports to copy"
          cp reports/*.xml . 2>/dev/null || echo "⚠️ No XML reports to copy"
          
          echo "📋 ZAP API scan summary:"
          echo "Target: $TARGET_URL"
          echo "Exit Code: $ZAP_EXIT_CODE (scan completed successfully)"
          echo "Reports: Available in artifacts"
          
          # Always exit with 0 for expected ZAP exit codes (0-3)
          # This prevents GitHub Actions from treating security findings as failures
          exit 0

      - name: Upload API scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-api-reports
          path: |
            *.html
            *.json
            *.xml
            *.sarif
          retention-days: 30
        continue-on-error: true

      - name: Upload API scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('*.sarif') != ''
        with:
          sarif_file: '*.sarif'
        continue-on-error: true

      - name: Generate API Scan Summary
        if: always()
        run: |
          echo "## 🔍 OWASP ZAP API Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Scanned:** ${{ env.TARGET_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** API" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports Available:" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Report: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- JSON Report: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- SARIF Report: Uploaded to GitHub Security tab (if code scanning enabled)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*API scan completed successfully*" >> $GITHUB_STEP_SUMMARY