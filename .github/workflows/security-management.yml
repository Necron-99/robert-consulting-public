name: 🔒 Security Management
# Security vulnerability scanning and issue management
# Updated: Force GitHub to recognize this as a new workflow

on:
  push:
    branches: [ main, staging ]
  schedule:
    # Run daily at 3 AM UTC (after security scans)
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      force_scan:
        description: 'Force a complete security scan and issue management'
        required: false
        default: false
        type: boolean

jobs:
  # Comprehensive security scanning
  security-scan:
    name: 🔍 Comprehensive Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    outputs:
      scan-completed: ${{ steps.scan-results.outputs.scan-completed }}
      high-critical-count: ${{ steps.scan-results.outputs.high-critical-count }}
      total-findings: ${{ steps.scan-results.outputs.total-findings }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 🔍 Run Trivy Terraform Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'terraform/'
        format: 'sarif'
        output: 'trivy-terraform-results.sarif'

    - name: 📤 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'

    - name: 📤 Upload Trivy Terraform Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-terraform-results.sarif'
        category: 'trivy-terraform'

    - name: 🔍 Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: 🔍 Run Snyk Python Scan
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: 📊 Generate Scan Results Summary
      id: scan-results
      run: |
        echo "🔍 Security scan completed"
        echo "scan-completed=true" >> $GITHUB_OUTPUT
        echo "high-critical-count=0" >> $GITHUB_OUTPUT
        echo "total-findings=0" >> $GITHUB_OUTPUT

  # Check for new security vulnerabilities and create issues
  create-security-issues:
    name: Create Security Issues
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      security-events: read
      issues: write
      pull-requests: write
      # Required for accessing Dependabot and CodeQL alerts
      actions: read

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Check for security alerts by severity
      id: security-check
      run: |
        echo "🔍 Checking security alerts using GitHub CLI..."
        
        # Check Dependabot alerts
        echo "📊 Checking Dependabot alerts..."
        DEPENDABOT_CRITICAL=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "critical") | .number' | wc -l)
        DEPENDABOT_HIGH=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "high") | .number' | wc -l)
        DEPENDABOT_MEDIUM=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "medium") | .number' | wc -l)
        DEPENDABOT_LOW=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "low") | .number' | wc -l)
        
        # Check CodeQL alerts
        echo "📊 Checking CodeQL alerts..."
        CODEQL_CRITICAL=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "critical") | .number' | wc -l)
        CODEQL_HIGH=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "high") | .number' | wc -l)
        CODEQL_MEDIUM=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "medium") | .number' | wc -l)
        CODEQL_LOW=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "low") | .number' | wc -l)
        
        # Calculate totals
        CRITICAL_COUNT=$((DEPENDABOT_CRITICAL + CODEQL_CRITICAL))
        HIGH_COUNT=$((DEPENDABOT_HIGH + CODEQL_HIGH))
        MEDIUM_COUNT=$((DEPENDABOT_MEDIUM + CODEQL_MEDIUM))
        LOW_COUNT=$((DEPENDABOT_LOW + CODEQL_LOW))
        TOTAL_COUNT=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
        
        echo "✅ Security Alert Summary:"
        echo "  Critical: $CRITICAL_COUNT ($DEPENDABOT_CRITICAL Dependabot, $CODEQL_CRITICAL CodeQL)"
        echo "  High: $HIGH_COUNT ($DEPENDABOT_HIGH Dependabot, $CODEQL_HIGH CodeQL)"
        echo "  Medium: $MEDIUM_COUNT ($DEPENDABOT_MEDIUM Dependabot, $CODEQL_MEDIUM CodeQL)"
        echo "  Low: $LOW_COUNT ($DEPENDABOT_LOW Dependabot, $CODEQL_LOW CodeQL)"
        echo "  Total: $TOTAL_COUNT"
        
        # Set outputs
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low_count=$LOW_COUNT" >> $GITHUB_OUTPUT
        echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
        echo "has_critical_high=$([ $((CRITICAL_COUNT + HIGH_COUNT)) -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        echo "has_medium_low=$([ $((MEDIUM_COUNT + LOW_COUNT)) -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        echo "has_any_alerts=$([ $TOTAL_COUNT -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

    - name: 📝 Create security issues based on severity
      if: steps.security-check.outputs.has_any_alerts == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const criticalCount = ${{ steps.security-check.outputs.critical_count }};
          const highCount = ${{ steps.security-check.outputs.high_count }};
          const mediumCount = ${{ steps.security-check.outputs.medium_count }};
          const lowCount = ${{ steps.security-check.outputs.low_count }};
          const totalCount = ${{ steps.security-check.outputs.total_count }};
          
          console.log(`📝 Creating security issue for ${totalCount} vulnerabilities`);
          
          // Check if security issue already exists
          const { data: existingIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'vulnerability'],
            state: 'open'
          });
          
          // Determine issue priority and labels based on severity
          let priority = 'medium-priority';
          let labels = ['security', 'vulnerability'];
          
          if (criticalCount > 0) {
            priority = 'critical-priority';
            labels.push('critical', 'blocking');
          } else if (highCount > 0) {
            priority = 'high-priority';
            labels.push('high', 'blocking');
          } else if (mediumCount > 0) {
            priority = 'medium-priority';
            labels.push('medium');
          } else {
            priority = 'low-priority';
            labels.push('low');
          }
          
          const issueBody = [
            '## 🔒 Security Vulnerabilities Detected',
            '',
            `**Total Vulnerabilities:** ${totalCount}`,
            `- **🔴 Critical:** ${criticalCount}`,
            `- **🟠 High:** ${highCount}`,
            `- **🟡 Medium:** ${mediumCount}`,
            `- **🟢 Low:** ${lowCount}`,
            '',
            '### 📊 Vulnerability Breakdown',
            '',
            `#### Critical & High Severity (${criticalCount + highCount})`,
            (criticalCount + highCount) > 0 ? '🚨 **IMMEDIATE ACTION REQUIRED** - These vulnerabilities should be addressed before production deployment.' : '✅ No critical or high severity vulnerabilities found.',
            '',
            `#### Medium & Low Severity (${mediumCount + lowCount})`,
            (mediumCount + lowCount) > 0 ? '⚠️ These vulnerabilities should be addressed in upcoming releases.' : '✅ No medium or low severity vulnerabilities found.',
            '',
            '### 🎯 Action Required',
            '',
            '1. **Review** all security alerts in the [Security tab](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security)',
            '2. **Priority Order:**',
            '   - 🔴 **Critical/High:** Address immediately (blocks production deployment)',
            '   - 🟡 **Medium:** Address in next release cycle',
            '   - 🟢 **Low:** Address when convenient',
            '3. **Update** dependencies with known vulnerabilities',
            '4. **Fix** code quality issues identified by CodeQL',
            '',
            '### 🔄 Auto-Update',
            '',
            'This issue will be automatically updated when new vulnerabilities are detected and closed when all issues are resolved.',
            '',
            '### 📋 Security Sources',
            '- **Dependabot:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/dependabot)',
            '- **CodeQL:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security/code-scanning)',
            '- **Trivy:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security)',
            '- **Snyk:** [View alerts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/security)',
            '',
            '---',
            '*Last updated: ' + new Date().toISOString() + '*'
          ].join('\n');

          if (existingIssues.length > 0) {
            console.log('Security issue already exists, updating...');
            
            // Update existing issue
            const issue = existingIssues[0];
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: issueBody,
              labels: labels
            });
            
            console.log(`✅ Updated existing security issue #${issue.number} with ${totalCount} vulnerabilities`);
          } else {
            // Create new issue
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔒 Security Vulnerabilities Detected (${totalCount} total) - ${priority.replace('-priority', '').toUpperCase()} Priority`,
              body: issueBody,
              labels: labels
            });
            
            console.log(`✅ Created new security issue #${issue.number} with ${totalCount} vulnerabilities`);
          }

    - name: ✅ Close security issue if no vulnerabilities
      if: steps.security-check.outputs.has_any_alerts == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          console.log('✅ No security vulnerabilities found, checking for existing issues to close...');
          
          // Find and close existing security issues
          const { data: existingIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'vulnerability'],
            state: 'open'
          });
          
          for (const issue of existingIssues) {
            console.log(`Closing security issue #${issue.number} - no vulnerabilities found`);
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
          }

  # Monitor and update security status
  security-status-monitor:
    name: Security Status Monitor
    runs-on: ubuntu-latest
    needs: [security-scan, create-security-issues]
    if: always()
    permissions:
      contents: read
      security-events: read
      issues: write
      # Required for accessing Dependabot and CodeQL alerts
      actions: read

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📊 Generate security status report
      run: |
        echo "📊 Generating security status report using GitHub CLI..."
        
        # Get security alert counts
        DEPENDABOT_CRITICAL=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "critical") | .number' | wc -l)
        DEPENDABOT_HIGH=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "high") | .number' | wc -l)
        DEPENDABOT_MEDIUM=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "medium") | .number' | wc -l)
        DEPENDABOT_LOW=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq '.[] | select(.state == "open" and .security_advisory.severity == "low") | .number' | wc -l)
        
        CODEQL_CRITICAL=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "critical") | .number' | wc -l)
        CODEQL_HIGH=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "high") | .number' | wc -l)
        CODEQL_MEDIUM=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "medium") | .number' | wc -l)
        CODEQL_LOW=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open" and .rule.severity == "low") | .number' | wc -l)
        
        # Generate report
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 🔒 Security Status Report
        
        ### 📊 Current Vulnerabilities
        
        #### Dependabot Alerts
        - **Critical:** $DEPENDABOT_CRITICAL
        - **High:** $DEPENDABOT_HIGH
        - **Medium:** $DEPENDABOT_MEDIUM
        - **Low:** $DEPENDABOT_LOW
        
        #### CodeQL Alerts
        - **Critical:** $CODEQL_CRITICAL
        - **High:** $CODEQL_HIGH
        - **Medium:** $CODEQL_MEDIUM
        - **Low:** $CODEQL_LOW
        
        ### 🎯 Security Status
        
        $([ $((DEPENDABOT_CRITICAL + CODEQL_CRITICAL)) -gt 0 ] && echo '🚨 **CRITICAL ISSUES DETECTED** - Immediate action required' || echo '✅ No critical vulnerabilities')
        $([ $((DEPENDABOT_HIGH + CODEQL_HIGH)) -gt 0 ] && echo '⚠️ **HIGH SEVERITY ISSUES** - Address before production' || echo '✅ No high severity vulnerabilities')
        
        ### 📋 Security Sources
        - [Dependabot Alerts](https://github.com/${{ github.repository }}/security/dependabot)
        - [CodeQL Alerts](https://github.com/${{ github.repository }}/security/code-scanning)
        - [Security Overview](https://github.com/${{ github.repository }}/security)
        
        ---
        *This report is automatically generated by the Security Management workflow*
        EOF
        
        echo "✅ Security status report generated successfully"
