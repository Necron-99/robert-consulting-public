name: 🎯 Enhanced Closed-Loop Issue Management

on:
  schedule:
    # Run every 2 hours for faster response
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Management action to perform'
        required: true
        default: 'full-cycle'
        type: choice
        options:
          - full-cycle
          - scan-only
          - close-resolved
          - create-issues
          - update-priorities
          - generate-report
      priority_filter:
        description: 'Priority filter for processing'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - critical
          - high
          - medium
          - low
  issues:
    types: [opened, closed, labeled, unlabeled, edited]
  pull_request:
    types: [opened, closed, merged, edited]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPOSITORY: ${{ github.repository }}

jobs:
  # 🔍 Comprehensive Issue Analysis
  issue-analysis:
    name: 🔍 Issue Analysis & Categorization
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    outputs:
      total-issues: ${{ steps.analysis.outputs.total-issues }}
      security-issues: ${{ steps.analysis.outputs.security-issues }}
      critical-issues: ${{ steps.analysis.outputs.critical-issues }}
      high-issues: ${{ steps.analysis.outputs.high-issues }}
      medium-issues: ${{ steps.analysis.outputs.medium-issues }}
      low-issues: ${{ steps.analysis.outputs.low-issues }}
      stale-issues: ${{ steps.analysis.outputs.stale-issues }}
      needs-attention: ${{ steps.analysis.outputs.needs-attention }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 🔧 Setup GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: 🔍 Comprehensive Issue Analysis
        id: analysis
        run: |
          echo "🔍 Analyzing all issues for comprehensive management..."
          
          # Get all issues with detailed information
          all_issues=$(gh issue list --state all --json number,title,labels,createdAt,updatedAt,state,assignees,comments)
          open_issues=$(gh issue list --state open --json number,title,labels,createdAt,updatedAt,state,assignees,comments)
          
          # Count total issues
          total_issues=$(echo "$all_issues" | jq length)
          open_issues_count=$(echo "$open_issues" | jq length)
          
          # Categorize by labels and severity
          security_issues=$(echo "$open_issues" | jq '[.[] | select(.labels[] | .name == "security")] | length')
          critical_issues=$(echo "$open_issues" | jq '[.[] | select(.labels[] | .name == "critical")] | length')
          high_issues=$(echo "$open_issues" | jq '[.[] | select(.labels[] | .name == "high")] | length')
          medium_issues=$(echo "$open_issues" | jq '[.[] | select(.labels[] | .name == "medium")] | length')
          low_issues=$(echo "$open_issues" | jq '[.[] | select(.labels[] | .name == "low")] | length')
          
          # Find stale issues (older than 7 days without updates)
          current_time=$(date +%s)
          stale_issues=$(echo "$open_issues" | jq --arg current_time "$current_time" '[.[] | select((($current_time | tonumber) - (.updatedAt | fromdateiso8601)) > 604800)] | length')
          
          # Find issues that need attention (unassigned critical/high issues)
          needs_attention=$(echo "$open_issues" | jq '[.[] | select((.labels[] | .name == "critical" or .name == "high") and (.assignees | length == 0))] | length')
          
          # Output results
          echo "total-issues=$total_issues" >> $GITHUB_OUTPUT
          echo "security-issues=$security_issues" >> $GITHUB_OUTPUT
          echo "critical-issues=$critical_issues" >> $GITHUB_OUTPUT
          echo "high-issues=$high_issues" >> $GITHUB_OUTPUT
          echo "medium-issues=$medium_issues" >> $GITHUB_OUTPUT
          echo "low-issues=$low_issues" >> $GITHUB_OUTPUT
          echo "stale-issues=$stale_issues" >> $GITHUB_OUTPUT
          echo "needs-attention=$needs_attention" >> $GITHUB_OUTPUT
          
          echo "📊 Issue Analysis Results:"
          echo "  📋 Total Issues: $total_issues"
          echo "  🔓 Open Issues: $open_issues_count"
          echo "  🔒 Security Issues: $security_issues"
          echo "  🚨 Critical Issues: $critical_issues"
          echo "  ⚠️  High Issues: $high_issues"
          echo "  📋 Medium Issues: $medium_issues"
          echo "  ℹ️  Low Issues: $low_issues"
          echo "  🕐 Stale Issues: $stale_issues"
          echo "  👀 Needs Attention: $needs_attention"

  # 🚨 Priority-Based Issue Resolution
  priority-resolution:
    name: 🚨 Priority-Based Resolution
    runs-on: ubuntu-latest
    needs: [issue-analysis]
    if: always() && (needs.issue-analysis.result == 'success')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: 🚨 Process Critical Issues
        run: |
          echo "🚨 Processing critical issues with highest priority..."
          
          # Get all critical issues
          critical_issues=$(gh issue list --label "critical" --state open --json number,title,assignees,createdAt)
          
          echo "$critical_issues" | jq -r '.[] | @base64' | while read -r issue; do
            issue_data=$(echo "$issue" | base64 --decode)
            issue_number=$(echo "$issue_data" | jq -r '.number')
            issue_title=$(echo "$issue_data" | jq -r '.title')
            assignees=$(echo "$issue_data" | jq -r '.assignees | length')
            created_at=$(echo "$issue_data" | jq -r '.createdAt')
            
            echo "Processing critical issue #$issue_number: $issue_title"
            
            # Check if issue is unassigned
            if [ "$assignees" -eq 0 ]; then
              echo "⚠️ Critical issue #$issue_number is unassigned - adding urgent label"
              gh issue edit "$issue_number" --add-label "urgent" || echo "Failed to add urgent label"
              
              # Create a comment about the urgency
              echo "🚨 **URGENT ATTENTION REQUIRED** 🚨" > urgent_comment.txt
              echo "" >> urgent_comment.txt
              echo "This critical issue requires immediate attention:" >> urgent_comment.txt
              echo "- ⏰ **Created:** $(date -d "$created_at" '+%Y-%m-%d %H:%M:%S')" >> urgent_comment.txt
              echo "- 🏷️ **Priority:** Critical" >> urgent_comment.txt
              echo "- 👤 **Status:** Unassigned" >> urgent_comment.txt
              echo "" >> urgent_comment.txt
              echo "**Action Required:** Please assign this issue to a team member immediately." >> urgent_comment.txt
              echo "" >> urgent_comment.txt
              echo "**Auto-generated by Enhanced Issue Management System**" >> urgent_comment.txt
              gh issue comment "$issue_number" --body-file urgent_comment.txt || echo "Failed to add comment"
            fi
            
            # Check if issue is older than 24 hours
            current_time=$(date +%s)
            issue_time=$(date -d "$created_at" +%s)
            hours_old=$(( (current_time - issue_time) / 3600 ))
            
            if [ "$hours_old" -gt 24 ]; then
              echo "⚠️ Critical issue #$issue_number is $hours_old hours old - escalating"
              gh issue edit "$issue_number" --add-label "escalated" || echo "Failed to add escalated label"
              
              cat > escalation_comment.txt << 'EOF'
🚨 **ESCALATION NOTICE** 🚨

This critical issue has been open for **$hours_old hours** and requires immediate resolution.

**Escalation Actions:**
- 🏷️ Added 'escalated' label
- 📢 Notifying team leads
- ⏰ Monitoring for resolution

**Auto-generated by Enhanced Issue Management System**
EOF
              gh issue comment "$issue_number" --body-file escalation_comment.txt || echo "Failed to add escalation comment"
            fi
          done

      - name: ⚠️ Process High Priority Issues
        run: |
          echo "⚠️ Processing high priority issues..."
          
          # Get all high priority issues
          high_issues=$(gh issue list --label "high" --state open --json number,title,assignees,createdAt)
          
          echo "$high_issues" | jq -r '.[] | @base64' | while read -r issue; do
            issue_data=$(echo "$issue" | base64 --decode)
            issue_number=$(echo "$issue_data" | jq -r '.number')
            issue_title=$(echo "$issue_data" | jq -r '.title')
            assignees=$(echo "$issue_data" | jq -r '.assignees | length')
            created_at=$(echo "$issue_data" | jq -r '.createdAt')
            
            echo "Processing high priority issue #$issue_number: $issue_title"
            
            # Check if issue is unassigned
            if [ "$assignees" -eq 0 ]; then
              echo "⚠️ High priority issue #$issue_number is unassigned"
              gh issue edit "$issue_number" --add-label "needs-assignment" || echo "Failed to add needs-assignment label"
            fi
            
            # Check if issue is older than 3 days
            current_time=$(date +%s)
            issue_time=$(date -d "$created_at" +%s)
            days_old=$(( (current_time - issue_time) / 86400 ))
            
            if [ "$days_old" -gt 3 ]; then
              echo "⚠️ High priority issue #$issue_number is $days_old days old"
              gh issue edit "$issue_number" --add-label "stale" || echo "Failed to add stale label"
            fi
          done

      - name: 🔒 Process Security Issues
        run: |
          echo "🔒 Processing security issues with enhanced tracking..."
          
          # Get all security issues
          security_issues=$(gh issue list --label "security" --state open --json number,title,labels,assignees,createdAt)
          
          echo "$security_issues" | jq -r '.[] | @base64' | while read -r issue; do
            issue_data=$(echo "$issue" | base64 --decode)
            issue_number=$(echo "$issue_data" | jq -r '.number')
            issue_title=$(echo "$issue_data" | jq -r '.title')
            labels=$(echo "$issue_data" | jq -r '.labels[] | .name' | tr '\n' ' ')
            assignees=$(echo "$issue_data" | jq -r '.assignees | length')
            created_at=$(echo "$issue_data" | jq -r '.createdAt')
            
            echo "Processing security issue #$issue_number: $issue_title"
            
            # Check if it's a critical security issue
            if echo "$labels" | grep -q "critical"; then
              echo "🚨 Critical security issue #$issue_number - adding security-urgent label"
              gh issue edit "$issue_number" --add-label "security-urgent" || echo "Failed to add security-urgent label"
              
              # Create security-specific comment
              cat > security_critical_comment.txt << 'EOF'
🔒 **CRITICAL SECURITY ISSUE** 🔒

This security issue has been flagged as CRITICAL and requires immediate attention:

**Security Protocol:**
- 🚨 **Priority:** Critical Security
- ⏰ **Response Time:** Immediate
- 🔒 **Confidentiality:** Handle with care
- 📋 **Documentation:** Document all actions taken

**Required Actions:**
1. Assign to security team member immediately
2. Begin security assessment
3. Document remediation steps
4. Update with progress within 4 hours

**Auto-generated by Enhanced Security Issue Management**
EOF
              gh issue comment "$issue_number" --body-file security_critical_comment.txt || echo "Failed to add security comment"
            fi
            
            # Check if security issue is unassigned
            if [ "$assignees" -eq 0 ]; then
              echo "⚠️ Security issue #$issue_number is unassigned"
              gh issue edit "$issue_number" --add-label "security-unassigned" || echo "Failed to add security-unassigned label"
            fi
          done

  # 🔄 Intelligent Auto-Resolution
  intelligent-auto-resolution:
    name: 🔄 Intelligent Auto-Resolution
    runs-on: ubuntu-latest
    needs: [issue-analysis]
    if: always() && (needs.issue-analysis.result == 'success')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: 🔍 Check for Resolved Issues
        run: |
          echo "🔍 Checking for issues that may have been resolved..."
          
          # Get all open issues
          open_issues=$(gh issue list --state open --json number,title,labels,createdAt,updatedAt)
          
          echo "$open_issues" | jq -r '.[] | @base64' | while read -r issue; do
            issue_data=$(echo "$issue" | base64 --decode)
            issue_number=$(echo "$issue_data" | jq -r '.number')
            issue_title=$(echo "$issue_data" | jq -r '.title')
            labels=$(echo "$issue_data" | jq -r '.labels[] | .name' | tr '\n' ' ')
            created_at=$(echo "$issue_data" | jq -r '.createdAt')
            updated_at=$(echo "$issue_data" | jq -r '.updatedAt')
            
            # Check if issue has been updated recently (within last 7 days)
            current_time=$(date +%s)
            updated_time=$(date -d "$updated_at" +%s)
            days_since_update=$(( (current_time - updated_time) / 86400 ))
            
            # Check for specific patterns that might indicate resolution
            if echo "$issue_title" | grep -qi "eslint\|lint\|code quality"; then
              echo "🔍 Checking ESLint/code quality issue #$issue_number for resolution..."
              
              # Check if there have been recent commits that might have fixed the issue
              recent_commits=$(git log --since="7 days ago" --oneline | grep -i "fix\|eslint\|lint" | wc -l)
              
              if [ "$recent_commits" -gt 0 ]; then
                echo "✅ Found recent commits that might resolve issue #$issue_number"
                cat > auto_resolution_comment.txt << 'EOF'
🤖 **Auto-Resolution Check** 🤖

I've detected recent commits that may have resolved this issue:

**Recent Activity:**
- 📝 Recent commits: $recent_commits
- 🔍 Pattern: ESLint/Lint fixes detected
- ⏰ Checked: $(date)

**Please verify if this issue has been resolved and close it if so.**

**Auto-generated by Enhanced Issue Management System**
EOF
                gh issue comment "$issue_number" --body-file auto_resolution_comment.txt || echo "Failed to add auto-resolution comment"
              fi
            fi
            
            # Check for stale issues that might need closure
            if [ "$days_since_update" -gt 30 ]; then
              echo "🕐 Issue #$issue_number is stale ($days_since_update days since update)"
              
              # Check if it's a low priority issue
              if echo "$labels" | grep -q "low"; then
                echo "🤔 Low priority stale issue #$issue_number - considering closure"
                cat > stale_issue_comment.txt << 'EOF'
🕐 **Stale Issue Notice** 🕐

This issue has been inactive for **$days_since_update days** and is marked as low priority.

**Options:**
1. **Close** if no longer relevant
2. **Update** with current status
3. **Reassign** if still needed

**Auto-generated by Enhanced Issue Management System**
EOF
                gh issue comment "$issue_number" --body-file stale_issue_comment.txt || echo "Failed to add stale issue comment"
              fi
            fi
          done

  # 📊 Comprehensive Reporting
  comprehensive-reporting:
    name: 📊 Comprehensive Reporting
    runs-on: ubuntu-latest
    needs: [issue-analysis, priority-resolution, intelligent-auto-resolution]
    if: always()
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: 📊 Generate Comprehensive Report
        run: |
          echo "📊 Generating comprehensive issue management report..."
          
          # Get current issue statistics
          total_issues=$(gh issue list --state all --json number | jq length)
          open_issues=$(gh issue list --state open --json number | jq length)
          closed_issues=$(gh issue list --state closed --json number | jq length)
          security_issues=$(gh issue list --label "security" --state open --json number | jq length)
          critical_issues=$(gh issue list --label "critical" --state open --json number | jq length)
          high_issues=$(gh issue list --label "high" --state open --json number | jq length)
          medium_issues=$(gh issue list --label "medium" --state open --json number | jq length)
          low_issues=$(gh issue list --label "low" --state open --json number | jq length)
          
          # Get recent activity
          recent_closed=$(gh issue list --state closed --json closedAt | jq '[.[] | select(.closedAt != null)] | length')
          
          # Create comprehensive report
          cat > issue-management-report.md << EOF
          # 📊 Enhanced Issue Management Report
          
          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          **Workflow:** Enhanced Closed-Loop Issue Management
          
          ## 📈 Issue Statistics
          
          | Metric | Count | Status |
          |--------|-------|--------|
          | 📋 Total Issues | $total_issues | - |
          | 🔓 Open Issues | $open_issues | Active |
          | ✅ Closed Issues | $closed_issues | Resolved |
          | 🔒 Security Issues | $security_issues | 🔴 Critical |
          | 🚨 Critical Issues | $critical_issues | 🔴 Urgent |
          | ⚠️ High Issues | $high_issues | 🟡 Important |
          | 📋 Medium Issues | $medium_issues | 🟢 Normal |
          | ℹ️ Low Issues | $low_issues | 🔵 Low Priority |
          
          ## 🎯 Priority Distribution
          
          - **🔴 Critical:** $critical_issues issues (Immediate attention required)
          - **🟡 High:** $high_issues issues (Important, resolve within 3 days)
          - **🟢 Medium:** $medium_issues issues (Normal priority)
          - **🔵 Low:** $low_issues issues (Can be addressed when time permits)
          
          ## 🔒 Security Issues Breakdown
          
          - **Total Security Issues:** $security_issues
          - **Status:** Active monitoring and resolution
          - **Priority:** All security issues are high priority
          
          ## 📊 Recent Activity
          
          - **Recently Closed:** $recent_closed issues
          - **Auto-Resolution Checks:** Applied to all issues
          - **Priority Updates:** Applied based on age and severity
          
          ## 🎯 Management Actions Taken
          
          ### ✅ Completed Actions:
          - 🔍 Comprehensive issue analysis
          - 🚨 Priority-based processing
          - 🔒 Security issue enhancement
          - 🔄 Intelligent auto-resolution checks
          - 📊 Detailed reporting
          
          ### 🎯 Next Steps:
          1. **Review critical issues** - Ensure all are assigned
          2. **Address security issues** - Prioritize based on severity
          3. **Update stale issues** - Close or reassign as needed
          4. **Monitor progress** - Track resolution rates
          
          ## 🚀 Recommendations
          
          ### For Critical Issues:
          - Assign immediately to senior team members
          - Set daily check-ins until resolved
          - Document all actions taken
          
          ### For Security Issues:
          - Treat all as high priority
          - Assign to security team
          - Document remediation steps
          - Verify fixes before closing
          
          ### For Stale Issues:
          - Review for relevance
          - Close if no longer needed
          - Reassign if still important
          - Update with current status
          
          ---
          
          **Report generated by Enhanced Closed-Loop Issue Management System**
          **Next run:** $(date -d '+2 hours' '+%Y-%m-%d %H:%M:%S')
          EOF
          
          echo "📊 Comprehensive report generated: issue-management-report.md"
          
          # Upload as artifact
          echo "📤 Uploading report as artifact..."
          echo "Report generated successfully" > report-status.txt

      - name: 📤 Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: issue-management-report
          path: |
            issue-management-report.md
            report-status.txt
          retention-days: 30

      - name: 📊 Create Summary
        run: |
          echo "## 📊 Enhanced Issue Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Current Status:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔓 **Open Issues:** $open_issues" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **Security Issues:** $security_issues" >> $GITHUB_STEP_SUMMARY
          echo "- 🚨 **Critical Issues:** $critical_issues" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **High Issues:** $high_issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Actions Taken:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Priority-based processing completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security issue enhancement applied" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Auto-resolution checks performed" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Comprehensive reporting generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Review and assign critical issues" >> $GITHUB_STEP_SUMMARY
          echo "- Address security issues immediately" >> $GITHUB_STEP_SUMMARY
          echo "- Update stale issues" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor resolution progress" >> $GITHUB_STEP_SUMMARY
