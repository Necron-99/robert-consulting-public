name: Terraform Secure Deployment

on:
  push:
    branches: [ main, staging ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

# Concurrency control to prevent multiple applies on same state
concurrency:
  group: tf-${{ github.ref }}-${{ github.event.inputs.environment || 'default' }}
  cancel-in-progress: false

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  TF_STATE_BUCKET: 'robert-consulting-terraform-state'
  TF_LOCK_TABLE: 'robert-consulting-terraform-locks'

jobs:
  # Pre-commit validation
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terraform/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Plan for staging
  plan-staging:
    name: Plan Staging Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -lock-timeout=10m
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -lock-timeout=10m -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_environment: staging

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-staging
          path: terraform/tfplan

  # Plan for production
  plan-production:
    name: Plan Production Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -lock-timeout=10m
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -lock-timeout=10m -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_environment: production

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-production
          path: terraform/tfplan

  # Apply for staging
  apply-staging:
    name: Apply Staging Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, plan-staging]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-staging
          path: terraform/

      - name: Terraform Init
        run: terraform init -lock-timeout=10m
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -lock-timeout=10m -auto-approve tfplan
        working-directory: terraform
        env:
          TF_VAR_environment: staging

      - name: Terraform Output
        run: terraform output -json
        working-directory: terraform

  # Apply for production (requires approval)
  apply-production:
    name: Apply Production Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, plan-production]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-production
          path: terraform/

      - name: Terraform Init
        run: terraform init -lock-timeout=10m
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -lock-timeout=10m -auto-approve tfplan
        working-directory: terraform
        env:
          TF_VAR_environment: production

      - name: Terraform Output
        run: terraform output -json
        working-directory: terraform

  # Manual deployment
  manual-deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -lock-timeout=10m
        working-directory: terraform

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -lock-timeout=10m
        working-directory: terraform
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -lock-timeout=10m -auto-approve
        working-directory: terraform
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -lock-timeout=10m -auto-approve
        working-directory: terraform
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}
