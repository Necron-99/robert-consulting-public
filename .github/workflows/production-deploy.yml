name: Production Deployment with Manual Approval

on:
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to production environment'
        required: true
        default: 'false'
        type: boolean
      skip_security_scan:
        description: 'Skip security scanning (not recommended)'
        required: false
        default: 'false'
        type: boolean
      force_deploy:
        description: 'Force deployment even if security issues found'
        required: false
        default: 'false'
        type: boolean

env:
  PRODUCTION_BUCKET: robert-consulting-website
  CLOUDFRONT_DISTRIBUTION_ID: E3HUVB85SPZFHO
  ALLOWED_IP_ADDRESS: ${{ secrets.ALLOWED_IP_ADDRESS }}

jobs:
  # Pre-deployment checks
  pre-deployment-checks:
    name: Pre-deployment Security & Quality Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_to_production == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify IP Address Access
      run: |
        echo "🔒 Verifying IP address access..."
        CURRENT_IP=$(curl -s https://api.ipify.org)
        echo "Current IP: $CURRENT_IP"
        echo "Allowed IP: ${{ env.ALLOWED_IP_ADDRESS }}"
        
        if [ "$CURRENT_IP" != "${{ env.ALLOWED_IP_ADDRESS }}" ]; then
          echo "❌ IP address verification failed!"
          echo "Current IP: $CURRENT_IP"
          echo "Expected IP: ${{ env.ALLOWED_IP_ADDRESS }}"
          echo "Deployment blocked for security reasons."
          exit 1
        fi
        
        echo "✅ IP address verification passed"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Setup Node.js for Security Scanning
      if: github.event.inputs.skip_security_scan != 'true'
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Security Scanning Tools
      if: github.event.inputs.skip_security_scan != 'true'
      run: |
        echo "🔧 Installing security scanning tools..."
        npm install -g npm-audit-ci-wrapper
        npm install -g snyk
        
    - name: Run Comprehensive Security Scan
      if: github.event.inputs.skip_security_scan != 'true'
      run: |
        echo "🔍 Running comprehensive security scan..."
        
        # Initialize security variables
        SECURITY_STATUS="scanning"
        DEPENDENCIES_STATUS="scanning"
        VULNERABILITIES_COUNT=0
        CRITICAL_VULNERABILITIES=0
        HIGH_VULNERABILITIES=0
        MEDIUM_VULNERABILITIES=0
        LOW_VULNERABILITIES=0
        SECRETS_FOUND=0
        CDN_ISSUES=0
        
        # Run npm audit if package.json exists
        if [ -f "website/package.json" ]; then
          echo "📦 Running npm audit..."
          cd website
          npm audit --audit-level=moderate --json > ../audit-results.json || true
          cd ..
          
          # Parse audit results
          if [ -f "audit-results.json" ]; then
            VULNERABILITIES_COUNT=$(jq -r '.metadata.vulnerabilities.total // 0' audit-results.json)
            CRITICAL_VULNERABILITIES=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-results.json)
            HIGH_VULNERABILITIES=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json)
            MEDIUM_VULNERABILITIES=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json)
            LOW_VULNERABILITIES=$(jq -r '.metadata.vulnerabilities.low // 0' audit-results.json)
          fi
        else
          echo "📦 No package.json found, skipping npm audit..."
        fi
        
        # Check for secrets in files
        echo "🔍 Scanning for secrets..."
        SECRETS_FOUND=$(grep -r -i "password\|secret\|key\|token" website/ --exclude-dir=node_modules --exclude="*.md" | wc -l || echo "0")
        
        # Check for HTTP links (should be HTTPS)
        echo "🔍 Checking for HTTP links..."
        CDN_ISSUES=$(grep -r "http://" website/ --exclude-dir=node_modules --exclude="*.md" | wc -l || echo "0")
        
        # Determine security status
        if [ "$CRITICAL_VULNERABILITIES" -gt 0 ]; then
          SECURITY_STATUS="critical"
          DEPENDENCIES_STATUS="vulnerable"
        elif [ "$HIGH_VULNERABILITIES" -gt 0 ]; then
          SECURITY_STATUS="high"
          DEPENDENCIES_STATUS="vulnerable"
        elif [ "$MEDIUM_VULNERABILITIES" -gt 0 ]; then
          SECURITY_STATUS="medium"
          DEPENDENCIES_STATUS="vulnerable"
        elif [ "$LOW_VULNERABILITIES" -gt 0 ]; then
          SECURITY_STATUS="low"
          DEPENDENCIES_STATUS="vulnerable"
        else
          SECURITY_STATUS="secure"
          DEPENDENCIES_STATUS="up-to-date"
        fi
        
        # Export security variables
        echo "SECURITY_STATUS=$SECURITY_STATUS" >> $GITHUB_ENV
        echo "DEPENDENCIES_STATUS=$DEPENDENCIES_STATUS" >> $GITHUB_ENV
        echo "VULNERABILITIES_COUNT=$VULNERABILITIES_COUNT" >> $GITHUB_ENV
        echo "CRITICAL_VULNERABILITIES=$CRITICAL_VULNERABILITIES" >> $GITHUB_ENV
        echo "HIGH_VULNERABILITIES=$HIGH_VULNERABILITIES" >> $GITHUB_ENV
        echo "MEDIUM_VULNERABILITIES=$MEDIUM_VULNERABILITIES" >> $GITHUB_ENV
        echo "LOW_VULNERABILITIES=$LOW_VULNERABILITIES" >> $GITHUB_ENV
        echo "SECRETS_FOUND=$SECRETS_FOUND" >> $GITHUB_ENV
        echo "CDN_ISSUES=$CDN_ISSUES" >> $GITHUB_ENV
        
        echo "🔍 Security scan results:"
        echo "  Status: $SECURITY_STATUS"
        echo "  Dependencies: $DEPENDENCIES_STATUS"
        echo "  Vulnerabilities: $VULNERABILITIES_COUNT"
        echo "  Critical: $CRITICAL_VULNERABILITIES"
        echo "  High: $HIGH_VULNERABILITIES"
        echo "  Medium: $MEDIUM_VULNERABILITIES"
        echo "  Low: $LOW_VULNERABILITIES"
        echo "  Secrets found: $SECRETS_FOUND"
        echo "  CDN issues: $CDN_ISSUES"
        
    - name: Security Gate Check
      if: github.event.inputs.skip_security_scan != 'true' && github.event.inputs.force_deploy != 'true'
      run: |
        echo "🚨 Security gate check..."
        
        if [ "${{ env.CRITICAL_VULNERABILITIES }}" -gt 0 ]; then
          echo "❌ CRITICAL vulnerabilities found! Deployment blocked."
          echo "Found ${{ env.CRITICAL_VULNERABILITIES }} critical vulnerabilities."
          echo "Please fix these issues before deploying to production."
          exit 1
        fi
        
        if [ "${{ env.HIGH_VULNERABILITIES }}" -gt 5 ]; then
          echo "❌ Too many HIGH vulnerabilities found! Deployment blocked."
          echo "Found ${{ env.HIGH_VULNERABILITIES }} high vulnerabilities (limit: 5)."
          echo "Please fix these issues before deploying to production."
          exit 1
        fi
        
        if [ "${{ env.SECRETS_FOUND }}" -gt 0 ]; then
          echo "❌ Secrets found in code! Deployment blocked."
          echo "Found ${{ env.SECRETS_FOUND }} potential secrets."
          echo "Please remove secrets before deploying to production."
          exit 1
        fi
        
        echo "✅ Security gate passed"
        
    - name: Manual Approval Required
      if: github.event.inputs.deploy_to_production == 'true'
      run: |
        echo "⏳ Manual approval required for production deployment..."
        echo "Please review the security scan results and approve the deployment."
        echo ""
        echo "Security Status: ${{ env.SECURITY_STATUS }}"
        echo "Dependencies: ${{ env.DEPENDENCIES_STATUS }}"
        echo "Vulnerabilities: ${{ env.VULNERABILITIES_COUNT }}"
        echo "Critical: ${{ env.CRITICAL_VULNERABILITIES }}"
        echo "High: ${{ env.HIGH_VULNERABILITIES }}"
        echo "Medium: ${{ env.MEDIUM_VULNERABILITIES }}"
        echo "Low: ${{ env.LOW_VULNERABILITIES }}"
        echo "Secrets found: ${{ env.SECRETS_FOUND }}"
        echo "CDN issues: ${{ env.CDN_ISSUES }}"
        echo ""
        echo "To proceed with deployment, set 'deploy_to_production' to 'true' in the workflow inputs."

  # Production deployment
  production-deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: github.event.inputs.deploy_to_production == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Generate Version Information
      run: |
        echo "📝 Generating version information..."
        
        # Generate version and build information
        VERSION="1.0.${{ github.run_number }}"
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        RELEASE_STATUS="production"
        
        # Create version.json with dynamic information
        cat > website/version.json << EOF
        {
          "version": "$VERSION",
          "build": "$BUILD_DATE",
          "release": "$RELEASE_STATUS",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "actor": "${{ github.actor }}",
          "workflow": "${{ github.workflow }}",
          "run_id": "${{ github.run_id }}",
          "run_number": "${{ github.run_number }}",
          "repository": "${{ github.repository }}",
          "event": "${{ github.event_name }}",
          "security": {
            "status": "${{ env.SECURITY_STATUS }}",
            "dependencies": "${{ env.DEPENDENCIES_STATUS }}",
            "vulnerabilities": ${{ env.VULNERABILITIES_COUNT }},
            "critical": ${{ env.CRITICAL_VULNERABILITIES }},
            "high": ${{ env.HIGH_VULNERABILITIES }},
            "medium": ${{ env.MEDIUM_VULNERABILITIES }},
            "low": ${{ env.LOW_VULNERABILITIES }},
            "last_scan": "$BUILD_DATE",
            "scan_duration": "$(date -u +%s)",
            "secrets_found": ${{ env.SECRETS_FOUND }},
            "cdn_issues": ${{ env.CDN_ISSUES }}
          }
        }
        EOF
        
        echo "✅ Version information generated:"
        echo "  Version: $VERSION"
        echo "  Build Date: $BUILD_DATE"
        echo "  Release Status: $RELEASE_STATUS"
        echo "  Commit: ${{ github.sha }}"
        echo "  Security Status: ${{ env.SECURITY_STATUS }}"
        
    - name: Make deployment script executable
      run: chmod +x website/deploy-website.sh
      
    - name: Deploy to Production S3
      run: |
        echo "🚀 Deploying to production S3 bucket..."
        cd website
        export CLOUDFRONT_DISTRIBUTION_ID=${{ env.CLOUDFRONT_DISTRIBUTION_ID }}
        ./deploy-website.sh deploy
        
    - name: Invalidate CloudFront Cache
      run: |
        echo "🔄 Invalidating CloudFront cache..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        
        echo "✅ CloudFront invalidation created: $INVALIDATION_ID"
        echo "⏱️ Cache invalidation is in progress..."
        echo "🌍 Changes will be visible globally in 5-15 minutes"
        
    - name: Wait for CloudFront Invalidation
      run: |
        echo "⏳ Waiting for CloudFront invalidation to complete..."
        
        INVALIDATION_ID=$(aws cloudfront list-invalidations \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --query 'InvalidationList.Items[0].Id' \
          --output text)
        
        echo "Waiting for invalidation: $INVALIDATION_ID"
        
        aws cloudfront wait invalidation-completed \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --id $INVALIDATION_ID
        
        echo "✅ CloudFront invalidation completed"
        
    - name: Verify Production Deployment
      run: |
        echo "🔍 Verifying production deployment..."
        
        # Check if index.html exists in S3
        if aws s3 ls "s3://${{ env.PRODUCTION_BUCKET }}/index.html" &> /dev/null; then
          echo "✅ index.html found in production bucket"
        else
          echo "❌ index.html not found in production bucket"
          exit 1
        fi
        
        # Get CloudFront domain
        CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution \
          --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --query 'Distribution.DomainName' \
          --output text)
        
        echo "✅ Production deployment verified"
        echo "🌐 CloudFront URL: https://$CLOUDFRONT_DOMAIN"
        echo "🌐 S3 Website URL: http://${{ env.PRODUCTION_BUCKET }}.s3-website-us-east-1.amazonaws.com"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Production Release v1.0.${{ github.run_number }}
        body: |
          ## Production Deployment
          
          **Version:** 1.0.${{ github.run_number }}
          **Build Date:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          **Commit:** ${{ github.sha }}
          **Actor:** ${{ github.actor }}
          
          ### Security Status
          - **Status:** ${{ env.SECURITY_STATUS }}
          - **Dependencies:** ${{ env.DEPENDENCIES_STATUS }}
          - **Vulnerabilities:** ${{ env.VULNERABILITIES_COUNT }}
          - **Critical:** ${{ env.CRITICAL_VULNERABILITIES }}
          - **High:** ${{ env.HIGH_VULNERABILITIES }}
          - **Medium:** ${{ env.MEDIUM_VULNERABILITIES }}
          - **Low:** ${{ env.LOW_VULNERABILITIES }}
          - **Secrets Found:** ${{ env.SECRETS_FOUND }}
          - **CDN Issues:** ${{ env.CDN_ISSUES }}
          
          ### Deployment URLs
          - **CloudFront:** https://$CLOUDFRONT_DOMAIN
          - **S3 Website:** http://${{ env.PRODUCTION_BUCKET }}.s3-website-us-east-1.amazonaws.com
        draft: false
        prerelease: false
        
    - name: Deployment Summary
      run: |
        echo "🎉 Production deployment completed successfully!"
        echo ""
        echo "📊 Deployment Summary:"
        echo "  Version: 1.0.${{ github.run_number }}"
        echo "  Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "  Commit: ${{ github.sha }}"
        echo "  Actor: ${{ github.actor }}"
        echo "  Security Status: ${{ env.SECURITY_STATUS }}"
        echo ""
        echo "🌐 Production URLs:"
        echo "  CloudFront: https://$CLOUDFRONT_DOMAIN"
        echo "  S3 Website: http://${{ env.PRODUCTION_BUCKET }}.s3-website-us-east-1.amazonaws.com"
        echo ""
        echo "✅ All checks passed and deployment is live!"
