name: 🚀 Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (bypass some checks)'
        required: false
        default: false
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_REGION: us-east-1
  S3_BUCKET: robert-consulting-website
  PRODUCTION_URL: https://robertconsulting.net

jobs:
  # 🔍 Quick Security & Quality Check
  security-quality-check:
    name: 🔍 Security & Quality Check
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: 📦 Install Security Tools
        run: |
          pip install --upgrade pip
          pip install semgrep bandit safety

      - name: 🔍 Security Check
        id: security-check
        run: |
          echo "🔍 Running security scans..."
          
          # Semgrep security scan
          if ! semgrep --config=auto --json --output=semgrep-results.json website/; then
            echo "⚠️ Semgrep found issues, but continuing..."
          fi
          
          # Bandit security scan
          if ! bandit -r website/ -f json -o bandit-results.json; then
            echo "⚠️ Bandit found issues, but continuing..."
          fi
          
          # Safety check for Python dependencies
          if ! safety check --json --output safety-results.json; then
            echo "⚠️ Safety found issues, but continuing..."
          fi
          
          echo "✅ Security checks completed"
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: 🧹 Quality Check
        id: quality-check
        run: |
          echo "🧹 Running quality checks..."
          
          # Check for common issues
          if find website/ -name "*.html" -exec grep -l "console.log" {} \; | grep -q .; then
            echo "⚠️ Found console.log statements in HTML files"
          fi
          
          if find website/ -name "*.js" -exec grep -l "TODO\|FIXME\|XXX" {} \; | grep -q .; then
            echo "⚠️ Found TODO/FIXME comments in JavaScript files"
          fi
          
          echo "✅ Quality checks completed"
          echo "passed=true" >> $GITHUB_OUTPUT

  # 🚀 Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-quality-check]
    if: needs.security-quality-check.outputs.security-passed == 'true' && needs.security-quality-check.outputs.quality-passed == 'true'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Deploy Website Files
        run: |
          echo "📦 Deploying website files to production..."
          
          # Deploy website with whitelist approach
          aws s3 sync website/ s3://$S3_BUCKET/ \
            --delete \
            --exclude "*" \
            --include "**/*.html" \
            --include "**/*.css" \
            --include "**/*.js" \
            --include "**/*.png" \
            --include "**/*.jpg" \
            --include "**/*.jpeg" \
            --include "**/*.gif" \
            --include "**/*.webp" \
            --include "**/*.svg" \
            --include "**/*.ico" \
            --include "**/*.woff" \
            --include "**/*.woff2" \
            --include "**/*.ttf" \
            --include "**/*.otf" \
            --include "**/*.eot" \
            --include "**/sitemap.xml" \
            --include "**/robots.txt" \
            --include "**/manifest.json" \
            --exclude "blog-posts/*"
          
          # Deploy blog posts separately (preserve existing)
          if [ -d "website/blog-posts" ]; then
            aws s3 sync website/blog-posts/ s3://$S3_BUCKET/blog-posts/ \
              --exclude "**/.DS_Store"
          fi
          
          # Deploy admin files
          if [ -d "admin" ]; then
            aws s3 sync admin/ s3://$S3_BUCKET/admin/ --delete
          fi
          
          # Deploy scripts
          if [ -d "scripts" ]; then
            aws s3 sync scripts/ s3://$S3_BUCKET/scripts/ --delete
          fi
          
          # Deploy lambda functions
          if [ -d "lambda" ]; then
            aws s3 sync lambda/ s3://$S3_BUCKET/lambda/ --delete
          fi
          
          # Deploy terraform files
          if [ -d "terraform" ]; then
            aws s3 sync terraform/ s3://$S3_BUCKET/terraform/ --delete
          fi

      - name: 🔄 Invalidate CloudFront Cache
        run: |
          echo "🔄 Invalidating CloudFront cache..."
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          echo "✅ CloudFront cache invalidated"

      - name: ✅ Production Deployment Complete
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "🌐 Website: ${{ env.PRODUCTION_URL }}"
          echo "📅 Deployed at: $(date)"

  # 🚨 Deployment Failure Notification
  notify-failure:
    name: 🚨 Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [security-quality-check, deploy-production]
    if: failure()
    
    steps:
      - name: 📢 Notify Failure
        run: |
          echo "❌ Production deployment failed!"
          echo "Check the logs above for details."
          exit 1
