name: Staging Deployment (Automatic)

on:
  push:
    branches: [ main ]
    paths:
      - 'website/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      skip_security_scan:
        description: 'Skip security scanning (not recommended)'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy Website Content to Staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Setup Node.js for Security Scanning
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Security Scanning Tools
      run: |
        echo "üîß Installing security scanning tools..."
        npm install -g npm-audit-ci-wrapper
        npm install -g snyk
        
    - name: Run Comprehensive Security Scan
      run: |
        echo "üîç Running comprehensive security scan..."
        
        # Initialize security variables
        SECURITY_STATUS="secure"
        DEPENDENCIES_STATUS="up-to-date"
        VULNERABILITIES_COUNT="0"
        HIGH_VULNERABILITIES="0"
        MEDIUM_VULNERABILITIES="0"
        LOW_VULNERABILITIES="0"
        CRITICAL_VULNERABILITIES="0"
        SECURITY_LAST_SCAN=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Scan website directory for vulnerabilities
        if [ -f "website/package.json" ]; then
          echo "üì¶ Scanning npm dependencies..."
          cd website
          
          # Run npm audit
          npm audit --audit-level=moderate --json > ../audit-results.json 2>/dev/null || true
          cd ..
          
          if [ -f "audit-results.json" ]; then
            # Parse audit results
            VULNERABILITIES_COUNT=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.total // 0' 2>/dev/null || echo "0")
            HIGH_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            MEDIUM_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.moderate // 0' 2>/dev/null || echo "0")
            LOW_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.low // 0' 2>/dev/null || echo "0")
            CRITICAL_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
            
            # Determine security status
            if [ "$CRITICAL_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="critical-vulnerabilities"
              DEPENDENCIES_STATUS="critical-updates-needed"
            elif [ "$HIGH_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="high-vulnerabilities"
              DEPENDENCIES_STATUS="high-priority-updates"
            elif [ "$MEDIUM_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="medium-vulnerabilities"
              DEPENDENCIES_STATUS="recommended-updates"
            elif [ "$LOW_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="low-vulnerabilities"
              DEPENDENCIES_STATUS="minor-updates"
            else
              SECURITY_STATUS="secure"
              DEPENDENCIES_STATUS="up-to-date"
            fi
          fi
        else
          echo "üì¶ No package.json found, skipping npm audit..."
        fi
        
        # Scan for common security issues in static files
        echo "üîç Scanning static files for security issues..."
        
        # Check for hardcoded secrets (basic scan)
        SECRETS_FOUND=0
        if grep -r -i "password\|secret\|key\|token" website/ --exclude-dir=node_modules --exclude="*.json" 2>/dev/null | grep -v "example\|placeholder\|TODO" | wc -l | grep -q "[1-9]"; then
          SECRETS_FOUND=1
          echo "‚ö†Ô∏è Potential secrets found in static files"
        fi
        
        # Check for outdated CDN links
        CDN_ISSUES=0
        if grep -r "http://" website/ --exclude-dir=node_modules 2>/dev/null | wc -l | grep -q "[1-9]"; then
          CDN_ISSUES=1
          echo "‚ö†Ô∏è HTTP links found (should use HTTPS)"
        fi
        
        # Update security status based on findings
        if [ "$SECRETS_FOUND" -eq 1 ] || [ "$CDN_ISSUES" -eq 1 ]; then
          if [ "$SECURITY_STATUS" = "secure" ]; then
            SECURITY_STATUS="security-issues-detected"
            DEPENDENCIES_STATUS="code-review-needed"
          fi
        fi
        
        echo "‚úÖ Security scan completed:"
        echo "  Status: $SECURITY_STATUS"
        echo "  Total Vulnerabilities: $VULNERABILITIES_COUNT"
        echo "  Critical: $CRITICAL_VULNERABILITIES"
        echo "  High: $HIGH_VULNERABILITIES"
        echo "  Medium: $MEDIUM_VULNERABILITIES"
        echo "  Low: $LOW_VULNERABILITIES"
        
    - name: Generate Dynamic Version Information
      run: |
        echo "üìù Generating dynamic version information..."
        
        # Get current date in YYYY-MM-DD format
        BUILD_DATE=$(date -u +"%Y-%m-%d")
        
        # Generate version from run number (e.g., 1.0.1, 1.0.2, etc.)
        VERSION="1.0.${{ github.run_number }}"
        
        # Determine release status based on branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          RELEASE_STATUS="stable"
        else
          RELEASE_STATUS="development"
        fi
        
        # Replace placeholders in version.json
        sed -i "s/{{GITHUB_VERSION}}/$VERSION/g" website/version.json
        sed -i "s/{{GITHUB_BUILD_DATE}}/$BUILD_DATE/g" website/version.json
        sed -i "s/{{GITHUB_RELEASE_STATUS}}/$RELEASE_STATUS/g" website/version.json
        sed -i "s/{{GITHUB_SHA}}/${{ github.sha }}/g" website/version.json
        sed -i "s/{{GITHUB_REF_NAME}}/${{ github.ref_name }}/g" website/version.json
        sed -i "s/{{GITHUB_WORKFLOW}}/${{ github.workflow }}/g" website/version.json
        sed -i "s/{{GITHUB_RUN_ID}}/${{ github.run_id }}/g" website/version.json
        sed -i "s/{{GITHUB_RUN_NUMBER}}/${{ github.run_number }}/g" website/version.json
        sed -i "s/{{GITHUB_ACTOR}}/${{ github.actor }}/g" website/version.json
        sed -i "s/{{GITHUB_REPOSITORY}}/${{ github.repository }}/g" website/version.json
        sed -i "s/{{GITHUB_EVENT_NAME}}/${{ github.event_name }}/g" website/version.json
        sed -i "s/{{GITHUB_SECURITY_STATUS}}/$SECURITY_STATUS/g" website/version.json
        sed -i "s/{{GITHUB_DEPENDENCIES_STATUS}}/$DEPENDENCIES_STATUS/g" website/version.json
        sed -i "s/{{GITHUB_VULNERABILITIES_COUNT}}/$VULNERABILITIES_COUNT/g" website/version.json
        sed -i "s/{{GITHUB_CRITICAL_VULNERABILITIES}}/$CRITICAL_VULNERABILITIES/g" website/version.json
        sed -i "s/{{GITHUB_HIGH_VULNERABILITIES}}/$HIGH_VULNERABILITIES/g" website/version.json
        sed -i "s/{{GITHUB_MEDIUM_VULNERABILITIES}}/$MEDIUM_VULNERABILITIES/g" website/version.json
        sed -i "s/{{GITHUB_LOW_VULNERABILITIES}}/$LOW_VULNERABILITIES/g" website/version.json
        sed -i "s/{{GITHUB_SECURITY_LAST_SCAN}}/$SECURITY_LAST_SCAN/g" website/version.json
        sed -i "s/{{GITHUB_SCAN_DURATION}}/$(date -u +%s)/g" website/version.json
        sed -i "s/{{GITHUB_SECRETS_FOUND}}/$SECRETS_FOUND/g" website/version.json
        sed -i "s/{{GITHUB_CDN_ISSUES}}/$CDN_ISSUES/g" website/version.json
        
        echo "‚úÖ Version information generated:"
        echo "  Version: $VERSION"
        echo "  Build Date: $BUILD_DATE"
        echo "  Release Status: $RELEASE_STATUS"
        echo "  Commit: ${{ github.sha }}"
        echo "  Security Status: $SECURITY_STATUS"
        
    - name: Make deployment script executable
      run: chmod +x website/deploy-website.sh
      
    - name: Deploy Website (Decoupled)
      run: |
        cd website
        export CLOUDFRONT_DISTRIBUTION_ID=E3HUVB85SPZFHO
        ./deploy-website.sh deploy
        
    - name: Wait for Invalidation (Optional)
      if: ${{ github.event.inputs.wait_for_completion == 'true' }}
      run: |
        echo "‚è≥ Waiting for CloudFront invalidation to complete..."
        
        while true; do
          STATUS=$(aws cloudfront get-invalidation \
            --distribution-id E3HUVB85SPZFHO \
            --id $INVALIDATION_ID \
            --query 'Invalidation.Status' \
            --output text)
          
          case $STATUS in
            "Completed")
              echo "‚úÖ Cache invalidation completed!"
              break
              ;;
            "InProgress")
              echo "‚è≥ Invalidation in progress... (Status: $STATUS)"
              sleep 30
              ;;
            *)
              echo "‚ö†Ô∏è Invalidation status: $STATUS"
              sleep 30
              ;;
          esac
        done
        
    - name: Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "üåê Website URLs:"
        echo "  Main Site: https://robert-consulting.net/index.html"
        echo "  Learning: https://robert-consulting.net/learning.html"
        echo "  Stats: https://robert-consulting.net/stats.html"
        echo "  Dashboard: https://robert-consulting.net/dashboard.html"
        echo ""
        echo "üìä CloudFront Distribution:"
        echo "  Domain: d24d7iql53878z.cloudfront.net"
        echo "  Status: Cache invalidation in progress"
        echo ""
        echo "üí° Tips:"
        echo "  - Use Ctrl+F5 or Cmd+Shift+R to force refresh"
        echo "  - Try incognito/private mode if changes aren't visible"
        echo "  - Changes may take 5-15 minutes to appear globally"
