name: Staging Deployment (Automatic)

on:
  push:
    branches: [ main ]
    paths:
      - 'website/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      skip_security_scan:
        description: 'Skip security scanning (not recommended)'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy Website Content to Staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Setup Node.js for Security Scanning
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        
    - name: Run GitHub Copilot Security Scan
      run: |
        echo "🔍 Running GitHub Copilot security scan..."
        
        # Initialize security variables
        SECURITY_STATUS="secure"
        DEPENDENCIES_STATUS="up-to-date"
        VULNERABILITIES_COUNT="0"
        HIGH_VULNERABILITIES="0"
        MEDIUM_VULNERABILITIES="0"
        LOW_VULNERABILITIES="0"
        CRITICAL_VULNERABILITIES="0"
        SECURITY_LAST_SCAN=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Check for CodeQL results
        if [ -f "codeql-results.sarif" ]; then
          echo "📊 Analyzing CodeQL results..."
          
          # Parse CodeQL SARIF results for security findings
          CRITICAL_VULNERABILITIES=$(jq -r '.runs[0].results[] | select(.ruleId | contains("security") or contains("vulnerability")) | select(.level == "error") | .ruleId' codeql-results.sarif 2>/dev/null | wc -l || echo "0")
          HIGH_VULNERABILITIES=$(jq -r '.runs[0].results[] | select(.ruleId | contains("security") or contains("vulnerability")) | select(.level == "warning") | .ruleId' codeql-results.sarif 2>/dev/null | wc -l || echo "0")
          MEDIUM_VULNERABILITIES=$(jq -r '.runs[0].results[] | select(.ruleId | contains("security") or contains("vulnerability")) | select(.level == "note") | .ruleId' codeql-results.sarif 2>/dev/null | wc -l || echo "0")
          
          VULNERABILITIES_COUNT=$((CRITICAL_VULNERABILITIES + HIGH_VULNERABILITIES + MEDIUM_VULNERABILITIES))
          
          # Determine security status based on CodeQL findings
          if [ "$CRITICAL_VULNERABILITIES" -gt 0 ]; then
            SECURITY_STATUS="critical-vulnerabilities"
            DEPENDENCIES_STATUS="critical-updates-needed"
          elif [ "$HIGH_VULNERABILITIES" -gt 0 ]; then
            SECURITY_STATUS="high-vulnerabilities"
            DEPENDENCIES_STATUS="high-priority-updates"
          elif [ "$MEDIUM_VULNERABILITIES" -gt 0 ]; then
            SECURITY_STATUS="medium-vulnerabilities"
            DEPENDENCIES_STATUS="recommended-updates"
          else
            SECURITY_STATUS="secure"
            DEPENDENCIES_STATUS="up-to-date"
          fi
        else
          echo "📊 No CodeQL results found, running basic security checks..."
        fi
        
        # Scan for common security issues in static files
        echo "🔍 Scanning static files for security issues..."
        
        # Check for hardcoded secrets (basic scan)
        SECRETS_FOUND=0
        if grep -r -i "password\|secret\|key\|token" website/ --exclude-dir=node_modules --exclude="*.json" 2>/dev/null | grep -v "example\|placeholder\|TODO" | wc -l | grep -q "[1-9]"; then
          SECRETS_FOUND=1
          echo "⚠️ Potential secrets found in static files"
        fi
        
        # Check for outdated CDN links
        CDN_ISSUES=0
        if grep -r "http://" website/ --exclude-dir=node_modules 2>/dev/null | wc -l | grep -q "[1-9]"; then
          CDN_ISSUES=1
          echo "⚠️ HTTP links found (should use HTTPS)"
        fi
        
        # Update security status based on findings
        if [ "$SECRETS_FOUND" -eq 1 ] || [ "$CDN_ISSUES" -eq 1 ]; then
          if [ "$SECURITY_STATUS" = "secure" ]; then
            SECURITY_STATUS="security-issues-detected"
            DEPENDENCIES_STATUS="code-review-needed"
          fi
        fi
        
        echo "✅ GitHub Copilot security scan completed:"
        echo "  Status: $SECURITY_STATUS"
        echo "  Total Vulnerabilities: $VULNERABILITIES_COUNT"
        echo "  Critical: $CRITICAL_VULNERABILITIES"
        echo "  High: $HIGH_VULNERABILITIES"
        echo "  Medium: $MEDIUM_VULNERABILITIES"
        echo "  Low: $LOW_VULNERABILITIES"
        
    - name: Generate Dynamic Version Information
      run: |
        echo "📝 Generating dynamic version information..."
        
        # Get current date in ISO format for build timestamp
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Generate version with major.minor.patch format
        # Use run number as patch version for production deployments
        VERSION="1.0.${{ github.run_number }}"
        
        # Determine release status based on branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          RELEASE_STATUS="stable"
        else
          RELEASE_STATUS="development"
        fi
        
        # Replace placeholders in version.json using a more robust approach
        # Create a temporary file with all replacements
        echo '{' > website/version-temp.json
        echo '  "version": "'$VERSION'",' >> website/version-temp.json
        echo '  "build": "'$BUILD_DATE'",' >> website/version-temp.json
        echo '  "release": "'$RELEASE_STATUS'",' >> website/version-temp.json
        echo '  "commit": "'$GITHUB_SHA'",' >> website/version-temp.json
        echo '  "branch": "'$GITHUB_REF_NAME'",' >> website/version-temp.json
        echo '  "workflow": "'$GITHUB_WORKFLOW'",' >> website/version-temp.json
        echo '  "run_id": "'$GITHUB_RUN_ID'",' >> website/version-temp.json
        echo '  "run_number": "'$GITHUB_RUN_NUMBER'",' >> website/version-temp.json
        echo '  "actor": "'$GITHUB_ACTOR'",' >> website/version-temp.json
        echo '  "repository": "'$GITHUB_REPOSITORY'",' >> website/version-temp.json
        echo '  "event_name": "'$GITHUB_EVENT_NAME'",' >> website/version-temp.json
        echo '  "security": {' >> website/version-temp.json
        echo '    "status": "'$SECURITY_STATUS'",' >> website/version-temp.json
        echo '    "dependencies": "'$DEPENDENCIES_STATUS'",' >> website/version-temp.json
        echo '    "vulnerabilities": "'$VULNERABILITIES_COUNT'",' >> website/version-temp.json
        echo '    "critical": "'$CRITICAL_VULNERABILITIES'",' >> website/version-temp.json
        echo '    "high": "'$HIGH_VULNERABILITIES'",' >> website/version-temp.json
        echo '    "medium": "'$MEDIUM_VULNERABILITIES'",' >> website/version-temp.json
        echo '    "low": "'$LOW_VULNERABILITIES'",' >> website/version-temp.json
        echo '    "last_scan": "'$SECURITY_LAST_SCAN'",' >> website/version-temp.json
        echo '    "scan_duration": "'$(date -u +%s)'",' >> website/version-temp.json
        echo '    "secrets_found": "'$SECRETS_FOUND'",' >> website/version-temp.json
        echo '    "cdn_issues": "'$CDN_ISSUES'"' >> website/version-temp.json
        echo '  },' >> website/version-temp.json
        echo '  "changelog": [' >> website/version-temp.json
        echo '    {' >> website/version-temp.json
        echo '      "version": "'$VERSION'",' >> website/version-temp.json
        echo '      "date": "'$BUILD_DATE'",' >> website/version-temp.json
        echo '      "commit": "'$GITHUB_SHA'",' >> website/version-temp.json
        echo '      "changes": [' >> website/version-temp.json
        echo '        "Automated deployment with GitHub Actions",' >> website/version-temp.json
        echo '        "Dynamic version information from CI/CD pipeline",' >> website/version-temp.json
        echo '        "Enhanced security monitoring and reporting",' >> website/version-temp.json
        echo '        "Automated CloudFront cache invalidation",' >> website/version-temp.json
        echo '        "Continuous integration and deployment"' >> website/version-temp.json
        echo '      ]' >> website/version-temp.json
        echo '    }' >> website/version-temp.json
        echo '  ],' >> website/version-temp.json
        echo '  "features": [' >> website/version-temp.json
        echo '    "Responsive design",' >> website/version-temp.json
        echo '    "Modern UI/UX",' >> website/version-temp.json
        echo '    "Contact form",' >> website/version-temp.json
        echo '    "Professional experience timeline",' >> website/version-temp.json
        echo '    "Service portfolio",' >> website/version-temp.json
        echo '    "Performance optimized",' >> website/version-temp.json
        echo '    "Automated deployments",' >> website/version-temp.json
        echo '    "Security monitoring",' >> website/version-temp.json
        echo '    "Cache invalidation"' >> website/version-temp.json
        echo '  ],' >> website/version-temp.json
        echo '  "technical": {' >> website/version-temp.json
        echo '    "framework": "Vanilla HTML/CSS/JS",' >> website/version-temp.json
        echo '    "responsive": true,' >> website/version-temp.json
        echo '    "seo_optimized": true,' >> website/version-temp.json
        echo '    "performance_optimized": true,' >> website/version-temp.json
        echo '    "ci_cd": "GitHub Actions",' >> website/version-temp.json
        echo '    "deployment": "Automated",' >> website/version-temp.json
        echo '    "security": "Monitored"' >> website/version-temp.json
        echo '  }' >> website/version-temp.json
        echo '}' >> website/version-temp.json
        
        # Replace the original file
        mv website/version-temp.json website/version.json
        
        echo "✅ Version information generated:"
        echo "  Version: $VERSION"
        echo "  Build Date: $BUILD_DATE"
        echo "  Release Status: $RELEASE_STATUS"
        echo "  Commit: ${{ github.sha }}"
        echo "  Security Status: $SECURITY_STATUS"
        
    - name: Make deployment script executable
      run: chmod +x website/deploy-website.sh
      
    - name: Deploy Website (Direct)
      run: |
        echo "🚀 Deploying website files to S3..."
        
        # Set CloudFront distribution ID
        export CLOUDFRONT_DISTRIBUTION_ID=E3HUVB85SPZFHO
        BUCKET_NAME="robert-consulting-website"
        
        # Navigate to website directory and sync only website files
        cd website
        
        # Sync website files to S3 (excluding scripts and testing)
        aws s3 sync . s3://$BUCKET_NAME --delete --exclude "*.sh" --exclude "*.ps1" --exclude "testing/*"
        
        # Set proper content types
        aws s3 cp s3://$BUCKET_NAME/index.html s3://$BUCKET_NAME/index.html --content-type "text/html" --metadata-directive REPLACE
        aws s3 cp s3://$BUCKET_NAME/styles.css s3://$BUCKET_NAME/styles.css --content-type "text/css" --metadata-directive REPLACE
        aws s3 cp s3://$BUCKET_NAME/script.js s3://$BUCKET_NAME/script.js --content-type "application/javascript" --metadata-directive REPLACE
        
        echo "✅ Website files deployed to S3"
        
    - name: Invalidate CloudFront Cache (Always for Production)
      run: |
        echo "🔄 Invalidating CloudFront cache for production deployment..."
        echo "📋 Distribution ID: E3HUVB85SPZFHO"
        echo "📋 Paths: /* (all content)"
        
        # Always create CloudFront invalidation for production deployments
        set -e  # Exit on any error
        
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id E3HUVB85SPZFHO \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        
        if [ -z "$INVALIDATION_ID" ]; then
          echo "❌ Failed to create CloudFront invalidation"
          exit 1
        fi
        
        echo "✅ CloudFront invalidation created successfully: $INVALIDATION_ID"
        echo "🌐 Cache invalidation will propagate globally within 15-20 minutes"
        
        # Store invalidation ID for potential use in subsequent steps
        echo "INVALIDATION_ID=$INVALIDATION_ID" >> $GITHUB_ENV
        
    - name: Wait for Invalidation (Optional)
      if: ${{ github.event.inputs.wait_for_completion == 'true' }}
      run: |
        echo "⏳ Waiting for CloudFront invalidation to complete..."
        echo "📋 Invalidation ID: $INVALIDATION_ID"
        
        while true; do
          STATUS=$(aws cloudfront get-invalidation \
            --distribution-id E3HUVB85SPZFHO \
            --id $INVALIDATION_ID \
            --query 'Invalidation.Status' \
            --output text)
          
          case $STATUS in
            "Completed")
              echo "✅ Cache invalidation completed!"
              break
              ;;
            "InProgress")
              echo "⏳ Invalidation in progress... (Status: $STATUS)"
              sleep 30
              ;;
            *)
              echo "⚠️ Invalidation status: $STATUS"
              sleep 30
              ;;
          esac
        done
        
    - name: Deployment Summary
      run: |
        echo "🎉 Production Deployment Complete!"
        echo "=================================="
        echo "📦 S3 Bucket: robert-consulting-website"
        echo "🌐 CloudFront Distribution: E3HUVB85SPZFHO"
        echo "🔄 Cache Invalidation: $INVALIDATION_ID"
        echo "⏰ Deployment Time: $(date -u)"
        echo ""
        echo "🌍 Your website is now live with fresh content!"
        echo "📝 Cache invalidation will complete within 15-20 minutes globally"
        
        
    - name: Deploy to Testing Site
      run: |
        echo "🧪 Deploying to testing site..."
        
        # Use the pre-configured testing bucket
        TESTING_BUCKET="robert-consulting-testing-site"
        echo "🔧 Using pre-configured testing bucket: $TESTING_BUCKET"
        
        # Verify the bucket exists and is properly configured
        echo "🔍 Verifying bucket configuration..."
        if aws s3api head-bucket --bucket $TESTING_BUCKET 2>/dev/null; then
          echo "✅ Testing bucket exists and is accessible"
        else
          echo "❌ Testing bucket does not exist or is not accessible"
          echo "🔧 Please run the manual setup to create the testing infrastructure first"
          exit 1
        fi
        
        # Sync testing files to S3
        echo "📁 Syncing testing files to S3..."
        aws s3 sync website/testing/ s3://$TESTING_BUCKET --delete
        
        echo "✅ Testing site deployed successfully!"
        echo "  S3 Bucket: $TESTING_BUCKET"
        echo "  Website URL: http://$TESTING_BUCKET.s3-website-us-east-1.amazonaws.com"
