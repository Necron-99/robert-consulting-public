name: Staging Deployment (Automatic)

on:
  push:
    branches: [ main ]
    paths:
      - 'website/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      skip_security_scan:
        description: 'Skip security scanning (not recommended)'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy Website Content to Staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Setup Node.js for Security Scanning
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Security Scanning Tools
      run: |
        echo "🔧 Installing security scanning tools..."
        npm install -g npm-audit-ci-wrapper
        npm install -g snyk
        
    - name: Run Comprehensive Security Scan
      run: |
        echo "🔍 Running comprehensive security scan..."
        
        # Initialize security variables
        SECURITY_STATUS="secure"
        DEPENDENCIES_STATUS="up-to-date"
        VULNERABILITIES_COUNT="0"
        HIGH_VULNERABILITIES="0"
        MEDIUM_VULNERABILITIES="0"
        LOW_VULNERABILITIES="0"
        CRITICAL_VULNERABILITIES="0"
        SECURITY_LAST_SCAN=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Scan website directory for vulnerabilities
        if [ -f "website/package.json" ]; then
          echo "📦 Scanning npm dependencies..."
          cd website
          
          # Run npm audit
          npm audit --audit-level=moderate --json > ../audit-results.json 2>/dev/null || true
          cd ..
          
          if [ -f "audit-results.json" ]; then
            # Parse audit results
            VULNERABILITIES_COUNT=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.total // 0' 2>/dev/null || echo "0")
            HIGH_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            MEDIUM_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.moderate // 0' 2>/dev/null || echo "0")
            LOW_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.low // 0' 2>/dev/null || echo "0")
            CRITICAL_VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
            
            # Determine security status
            if [ "$CRITICAL_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="critical-vulnerabilities"
              DEPENDENCIES_STATUS="critical-updates-needed"
            elif [ "$HIGH_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="high-vulnerabilities"
              DEPENDENCIES_STATUS="high-priority-updates"
            elif [ "$MEDIUM_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="medium-vulnerabilities"
              DEPENDENCIES_STATUS="recommended-updates"
            elif [ "$LOW_VULNERABILITIES" -gt 0 ]; then
              SECURITY_STATUS="low-vulnerabilities"
              DEPENDENCIES_STATUS="minor-updates"
            else
              SECURITY_STATUS="secure"
              DEPENDENCIES_STATUS="up-to-date"
            fi
          fi
        else
          echo "📦 No package.json found, skipping npm audit..."
        fi
        
        # Scan for common security issues in static files
        echo "🔍 Scanning static files for security issues..."
        
        # Check for hardcoded secrets (basic scan)
        SECRETS_FOUND=0
        if grep -r -i "password\|secret\|key\|token" website/ --exclude-dir=node_modules --exclude="*.json" 2>/dev/null | grep -v "example\|placeholder\|TODO" | wc -l | grep -q "[1-9]"; then
          SECRETS_FOUND=1
          echo "⚠️ Potential secrets found in static files"
        fi
        
        # Check for outdated CDN links
        CDN_ISSUES=0
        if grep -r "http://" website/ --exclude-dir=node_modules 2>/dev/null | wc -l | grep -q "[1-9]"; then
          CDN_ISSUES=1
          echo "⚠️ HTTP links found (should use HTTPS)"
        fi
        
        # Update security status based on findings
        if [ "$SECRETS_FOUND" -eq 1 ] || [ "$CDN_ISSUES" -eq 1 ]; then
          if [ "$SECURITY_STATUS" = "secure" ]; then
            SECURITY_STATUS="security-issues-detected"
            DEPENDENCIES_STATUS="code-review-needed"
          fi
        fi
        
        echo "✅ Security scan completed:"
        echo "  Status: $SECURITY_STATUS"
        echo "  Total Vulnerabilities: $VULNERABILITIES_COUNT"
        echo "  Critical: $CRITICAL_VULNERABILITIES"
        echo "  High: $HIGH_VULNERABILITIES"
        echo "  Medium: $MEDIUM_VULNERABILITIES"
        echo "  Low: $LOW_VULNERABILITIES"
        
    - name: Generate Dynamic Version Information
      run: |
        echo "📝 Generating dynamic version information..."
        
        # Get current date in YYYY-MM-DD format
        BUILD_DATE=$(date -u +"%Y-%m-%d")
        
        # Generate version from run number (e.g., 1.0.1, 1.0.2, etc.)
        VERSION="1.0.${{ github.run_number }}"
        
        # Determine release status based on branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          RELEASE_STATUS="stable"
        else
          RELEASE_STATUS="development"
        fi
        
        # Replace placeholders in version.json using a more robust approach
        # Create a temporary file with all replacements
        cat > website/version-temp.json << EOF
{
  "version": "$VERSION",
  "build": "$BUILD_DATE",
  "release": "$RELEASE_STATUS",
  "commit": "${{ github.sha }}",
  "branch": "${{ github.ref_name }}",
  "workflow": "${{ github.workflow }}",
  "run_id": "${{ github.run_id }}",
  "run_number": "${{ github.run_number }}",
  "actor": "${{ github.actor }}",
  "repository": "${{ github.repository }}",
  "event_name": "${{ github.event_name }}",
  "security": {
    "status": "$SECURITY_STATUS",
    "dependencies": "$DEPENDENCIES_STATUS",
    "vulnerabilities": "$VULNERABILITIES_COUNT",
    "critical": "$CRITICAL_VULNERABILITIES",
    "high": "$HIGH_VULNERABILITIES",
    "medium": "$MEDIUM_VULNERABILITIES",
    "low": "$LOW_VULNERABILITIES",
    "last_scan": "$SECURITY_LAST_SCAN",
    "scan_duration": "$(date -u +%s)",
    "secrets_found": "$SECRETS_FOUND",
    "cdn_issues": "$CDN_ISSUES"
  },
  "changelog": [
    {
      "version": "$VERSION",
      "date": "$BUILD_DATE",
      "commit": "${{ github.sha }}",
      "changes": [
        "Automated deployment with GitHub Actions",
        "Dynamic version information from CI/CD pipeline",
        "Enhanced security monitoring and reporting",
        "Automated CloudFront cache invalidation",
        "Continuous integration and deployment"
      ]
    }
  ],
  "features": [
    "Responsive design",
    "Modern UI/UX",
    "Contact form",
    "Professional experience timeline",
    "Service portfolio",
    "Performance optimized",
    "Automated deployments",
    "Security monitoring",
    "Cache invalidation"
  ],
  "technical": {
    "framework": "Vanilla HTML/CSS/JS",
    "responsive": true,
    "seo_optimized": true,
    "performance_optimized": true,
    "ci_cd": "GitHub Actions",
    "deployment": "Automated",
    "security": "Monitored"
  }
}
EOF
        
        # Replace the original file
        mv website/version-temp.json website/version.json
        
        echo "✅ Version information generated:"
        echo "  Version: $VERSION"
        echo "  Build Date: $BUILD_DATE"
        echo "  Release Status: $RELEASE_STATUS"
        echo "  Commit: ${{ github.sha }}"
        echo "  Security Status: $SECURITY_STATUS"
        
    - name: Make deployment script executable
      run: chmod +x website/deploy-website.sh
      
    - name: Deploy Website (Decoupled)
      run: |
        cd website
        export CLOUDFRONT_DISTRIBUTION_ID=E3HUVB85SPZFHO
        ./deploy-website.sh deploy
        
    - name: Wait for Invalidation (Optional)
      if: ${{ github.event.inputs.wait_for_completion == 'true' }}
      run: |
        echo "⏳ Waiting for CloudFront invalidation to complete..."
        
        while true; do
          STATUS=$(aws cloudfront get-invalidation \
            --distribution-id E3HUVB85SPZFHO \
            --id $INVALIDATION_ID \
            --query 'Invalidation.Status' \
            --output text)
          
          case $STATUS in
            "Completed")
              echo "✅ Cache invalidation completed!"
              break
              ;;
            "InProgress")
              echo "⏳ Invalidation in progress... (Status: $STATUS)"
              sleep 30
              ;;
            *)
              echo "⚠️ Invalidation status: $STATUS"
              sleep 30
              ;;
          esac
        done
        
    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo ""
        echo "🌐 Website URLs:"
        echo "  Main Site: https://robert-consulting.net/index.html"
        echo "  Learning: https://robert-consulting.net/learning.html"
        echo "  Stats: https://robert-consulting.net/stats.html"
        echo "  Dashboard: https://robert-consulting.net/dashboard.html"
        echo ""
        echo "📊 CloudFront Distribution:"
        echo "  Domain: d24d7iql53878z.cloudfront.net"
        echo "  Status: Cache invalidation in progress"
        echo ""
        echo "💡 Tips:"
        echo "  - Use Ctrl+F5 or Cmd+Shift+R to force refresh"
        echo "  - Try incognito/private mode if changes aren't visible"
        echo "  - Changes may take 5-15 minutes to appear globally"
        
    - name: Deploy to Testing Site
      run: |
        echo "🧪 Deploying to testing site..."
        
        # Use the pre-configured testing bucket
        TESTING_BUCKET="robert-consulting-testing-site"
        echo "🔧 Using pre-configured testing bucket: $TESTING_BUCKET"
        
        # Verify the bucket exists and is properly configured
        echo "🔍 Verifying bucket configuration..."
        if aws s3api head-bucket --bucket $TESTING_BUCKET 2>/dev/null; then
          echo "✅ Testing bucket exists and is accessible"
        else
          echo "❌ Testing bucket does not exist or is not accessible"
          echo "🔧 Please run the manual setup to create the testing infrastructure first"
          exit 1
        fi
        
        # Sync testing files to S3
        echo "📁 Syncing testing files to S3..."
        aws s3 sync website/testing/ s3://$TESTING_BUCKET --delete
        
        echo "✅ Testing site deployed successfully!"
        echo "  S3 Bucket: $TESTING_BUCKET"
        echo "  Website URL: http://$TESTING_BUCKET.s3-website-us-east-1.amazonaws.com"
