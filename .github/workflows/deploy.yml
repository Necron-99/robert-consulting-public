name: Deploy Website with Cache Invalidation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Generate Dynamic Version Information
      run: |
        echo "üìù Generating dynamic version information..."
        
        # Get current date in YYYY-MM-DD format
        BUILD_DATE=$(date -u +"%Y-%m-%d")
        
        # Generate version from run number (e.g., 1.0.1, 1.0.2, etc.)
        VERSION="1.0.${{ github.run_number }}"
        
        # Determine release status based on branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          RELEASE_STATUS="stable"
        else
          RELEASE_STATUS="development"
        fi
        
        # Check for security vulnerabilities
        SECURITY_STATUS="secure"
        DEPENDENCIES_STATUS="up-to-date"
        VULNERABILITIES_COUNT="0"
        SECURITY_LAST_SCAN="$BUILD_DATE"
        
        # Run security checks if package.json exists
        if [ -f "website/package.json" ]; then
          echo "üîç Running security checks..."
          cd website
          
          # Check for known vulnerabilities (if npm is available)
          if command -v npm &> /dev/null; then
            npm audit --audit-level=moderate --json > audit-results.json 2>/dev/null || true
            if [ -f "audit-results.json" ]; then
              VULNERABILITIES_COUNT=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.total // 0' 2>/dev/null || echo "0")
              if [ "$VULNERABILITIES_COUNT" -gt 0 ]; then
                SECURITY_STATUS="vulnerabilities-detected"
                DEPENDENCIES_STATUS="needs-update"
              fi
            fi
          fi
          
          cd ..
        fi
        
        # Replace placeholders in version.json
        sed -i "s/{{GITHUB_VERSION}}/$VERSION/g" website/version.json
        sed -i "s/{{GITHUB_BUILD_DATE}}/$BUILD_DATE/g" website/version.json
        sed -i "s/{{GITHUB_RELEASE_STATUS}}/$RELEASE_STATUS/g" website/version.json
        sed -i "s/{{GITHUB_SHA}}/${{ github.sha }}/g" website/version.json
        sed -i "s/{{GITHUB_REF_NAME}}/${{ github.ref_name }}/g" website/version.json
        sed -i "s/{{GITHUB_WORKFLOW}}/${{ github.workflow }}/g" website/version.json
        sed -i "s/{{GITHUB_RUN_ID}}/${{ github.run_id }}/g" website/version.json
        sed -i "s/{{GITHUB_RUN_NUMBER}}/${{ github.run_number }}/g" website/version.json
        sed -i "s/{{GITHUB_ACTOR}}/${{ github.actor }}/g" website/version.json
        sed -i "s/{{GITHUB_REPOSITORY}}/${{ github.repository }}/g" website/version.json
        sed -i "s/{{GITHUB_EVENT_NAME}}/${{ github.event_name }}/g" website/version.json
        sed -i "s/{{GITHUB_SECURITY_STATUS}}/$SECURITY_STATUS/g" website/version.json
        sed -i "s/{{GITHUB_DEPENDENCIES_STATUS}}/$DEPENDENCIES_STATUS/g" website/version.json
        sed -i "s/{{GITHUB_VULNERABILITIES_COUNT}}/$VULNERABILITIES_COUNT/g" website/version.json
        sed -i "s/{{GITHUB_SECURITY_LAST_SCAN}}/$SECURITY_LAST_SCAN/g" website/version.json
        
        echo "‚úÖ Version information generated:"
        echo "  Version: $VERSION"
        echo "  Build Date: $BUILD_DATE"
        echo "  Release Status: $RELEASE_STATUS"
        echo "  Commit: ${{ github.sha }}"
        echo "  Security Status: $SECURITY_STATUS"
        
    - name: Deploy to S3
      run: |
        echo "üöÄ Deploying files to S3..."
        aws s3 sync website/ s3://robert-consulting-website-2024-bd900b02/ --delete
        
    - name: Invalidate CloudFront Cache
      run: |
        echo "üîÑ Invalidating CloudFront cache..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id E3HUVB85SPZFHO \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        
        echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"
        echo "‚è±Ô∏è Cache invalidation is in progress..."
        echo "üåç Changes will be visible globally in 5-15 minutes"
        
    - name: Wait for Invalidation (Optional)
      if: ${{ github.event.inputs.wait_for_completion == 'true' }}
      run: |
        echo "‚è≥ Waiting for CloudFront invalidation to complete..."
        
        while true; do
          STATUS=$(aws cloudfront get-invalidation \
            --distribution-id E3HUVB85SPZFHO \
            --id $INVALIDATION_ID \
            --query 'Invalidation.Status' \
            --output text)
          
          case $STATUS in
            "Completed")
              echo "‚úÖ Cache invalidation completed!"
              break
              ;;
            "InProgress")
              echo "‚è≥ Invalidation in progress... (Status: $STATUS)"
              sleep 30
              ;;
            *)
              echo "‚ö†Ô∏è Invalidation status: $STATUS"
              sleep 30
              ;;
          esac
        done
        
    - name: Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "üåê Website URLs:"
        echo "  Main Site: https://robert-consulting.net/index.html"
        echo "  Learning: https://robert-consulting.net/learning.html"
        echo "  Stats: https://robert-consulting.net/stats.html"
        echo "  Dashboard: https://robert-consulting.net/dashboard.html"
        echo ""
        echo "üìä CloudFront Distribution:"
        echo "  Domain: d24d7iql53878z.cloudfront.net"
        echo "  Status: Cache invalidation in progress"
        echo ""
        echo "üí° Tips:"
        echo "  - Use Ctrl+F5 or Cmd+Shift+R to force refresh"
        echo "  - Try incognito/private mode if changes aren't visible"
        echo "  - Changes may take 5-15 minutes to appear globally"
