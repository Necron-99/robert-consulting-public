name: üöÄ Comprehensive Staging to Production Pipeline

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests and deploy directly to production'
        required: false
        default: false
        type: boolean

env:
  STAGING_BUCKET: robert-consulting-staging-website
  PRODUCTION_BUCKET: robert-consulting-website
  STAGING_DISTRIBUTION_ID: E23HB5TWK5BF44
  PRODUCTION_DISTRIBUTION_ID: E36DBYPHUUKB3V

jobs:
  # Stage 1: Deploy to Staging
  deploy-to-staging:
    name: üß™ Deploy to Staging
    runs-on: ubuntu-latest
    outputs:
      staging-url: ${{ steps.deploy.outputs.staging-url }}
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: üöÄ Deploy to Staging
        id: deploy
        run: |
          echo "üöÄ Deploying to staging environment..."
          
          # Deploy website files to staging S3
          aws s3 sync website/ s3://${{ env.STAGING_BUCKET }}/ \
            --exclude "*.md" \
            --exclude "*.json" \
            --exclude "*.txt" \
            --exclude "*.log" \
            --exclude "terraform/*" \
            --exclude "backup/*" \
            --exclude "scripts/*" \
            --exclude "lambda/*" \
            --exclude "admin/*"
          
          # Create CloudFront invalidation for staging
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.STAGING_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "staging-url=https://staging.robertconsulting.net" >> $GITHUB_OUTPUT
          echo "deployment-id=$INVALIDATION_ID" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Staging deployment completed"
          echo "üîó Staging URL: https://staging.robertconsulting.net"
          echo "üîÑ Invalidation ID: $INVALIDATION_ID"

      - name: ‚è≥ Wait for CloudFront propagation
        run: |
          echo "‚è≥ Waiting for CloudFront cache to propagate..."
          sleep 30

  # Stage 2: Comprehensive Testing
  comprehensive-testing:
    name: üß™ Comprehensive Testing Suite
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    if: ${{ !inputs.skip_tests }}
    outputs:
      tests-passed: ${{ steps.test-results.outputs.all-tests-passed }}
      security-score: ${{ steps.security-test.outputs.security-score }}
      performance-score: ${{ steps.performance-test.outputs.performance-score }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: üåê Basic Functionality Tests
        id: basic-tests
        run: |
          echo "üåê Running basic functionality tests..."
          
          # Test main pages with staging access key
          STAGING_URL="https://staging.robertconsulting.net"
          ACCESS_KEY="staging-access-2025"
          
          # Test homepage
          if curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/?key=$ACCESS_KEY" | grep -q "200"; then
            echo "‚úÖ Homepage accessible"
            HOMEPAGE_OK=true
          else
            echo "‚ùå Homepage not accessible"
            HOMEPAGE_OK=false
          fi
          
          # Test dashboard
          if curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/dashboard.html?key=$ACCESS_KEY" | grep -q "200"; then
            echo "‚úÖ Dashboard accessible"
            DASHBOARD_OK=true
          else
            echo "‚ùå Dashboard not accessible"
            DASHBOARD_OK=false
          fi
          
          # Test learning page
          if curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/learning.html?key=$ACCESS_KEY" | grep -q "200"; then
            echo "‚úÖ Learning page accessible"
            LEARNING_OK=true
          else
            echo "‚ùå Learning page not accessible"
            LEARNING_OK=false
          fi
          
          # Test CSS and JS loading (these don't need access key)
          if curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/css/main.css" | grep -q "200"; then
            echo "‚úÖ CSS files loading"
            CSS_OK=true
          else
            echo "‚ùå CSS files not loading"
            CSS_OK=false
          fi
          
          if curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/dashboard-script.js" | grep -q "200"; then
            echo "‚úÖ JS files loading"
            JS_OK=true
          else
            echo "‚ùå JS files not loading"
            JS_OK=false
          fi
          
          # Overall result
          if [ "$HOMEPAGE_OK" = "true" ] && [ "$DASHBOARD_OK" = "true" ] && [ "$LEARNING_OK" = "true" ] && [ "$CSS_OK" = "true" ] && [ "$JS_OK" = "true" ]; then
            echo "basic-tests-passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All basic functionality tests passed"
          else
            echo "basic-tests-passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Some basic functionality tests failed"
            exit 1
          fi

      - name: üîí Security Headers Test
        id: security-test
        run: |
          echo "üîí Testing security headers..."
          
          STAGING_URL="https://staging.robertconsulting.net"
          ACCESS_KEY="staging-access-2025"
          SECURITY_SCORE=0
          MAX_SCORE=8
          
          # Test security headers
          HEADERS=$(curl -s -I "$STAGING_URL/?key=$ACCESS_KEY")
          
          # Check for required security headers
          if echo "$HEADERS" | grep -qi "strict-transport-security"; then
            echo "‚úÖ HSTS header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå HSTS header missing"
          fi
          
          if echo "$HEADERS" | grep -qi "x-content-type-options"; then
            echo "‚úÖ X-Content-Type-Options header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå X-Content-Type-Options header missing"
          fi
          
          if echo "$HEADERS" | grep -qi "x-frame-options"; then
            echo "‚úÖ X-Frame-Options header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå X-Frame-Options header missing"
          fi
          
          if echo "$HEADERS" | grep -qi "x-xss-protection"; then
            echo "‚úÖ X-XSS-Protection header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå X-XSS-Protection header missing"
          fi
          
          if echo "$HEADERS" | grep -qi "referrer-policy"; then
            echo "‚úÖ Referrer-Policy header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå Referrer-Policy header missing"
          fi
          
          if echo "$HEADERS" | grep -qi "content-security-policy"; then
            echo "‚úÖ Content-Security-Policy header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå Content-Security-Policy header missing"
          fi
          
          if echo "$HEADERS" | grep -qi "permissions-policy"; then
            echo "‚úÖ Permissions-Policy header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå Permissions-Policy header missing"
          fi
          
          if echo "$HEADERS" | grep -qi "cross-origin-embedder-policy"; then
            echo "‚úÖ Cross-Origin-Embedder-Policy header present"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ùå Cross-Origin-Embedder-Policy header missing"
          fi
          
          echo "security-score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          echo "üîí Security score: $SECURITY_SCORE/$MAX_SCORE"
          
          # Require at least 6/8 security headers
          if [ $SECURITY_SCORE -ge 6 ]; then
            echo "‚úÖ Security headers test passed"
          else
            echo "‚ùå Security headers test failed (minimum 6/8 required)"
            exit 1
          fi

      - name: ‚ö° Performance Test
        id: performance-test
        run: |
          echo "‚ö° Running performance tests..."
          
          STAGING_URL="https://staging.robertconsulting.net"
          ACCESS_KEY="staging-access-2025"
          
          # Test response time
          RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$STAGING_URL/?key=$ACCESS_KEY")
          RESPONSE_TIME_MS=$(echo "$RESPONSE_TIME * 1000" | bc -l | cut -d. -f1)
          
          echo "‚ö° Response time: ${RESPONSE_TIME_MS}ms"
          
          # Performance scoring
          if [ $RESPONSE_TIME_MS -lt 1000 ]; then
            PERFORMANCE_SCORE=100
            echo "‚úÖ Excellent performance (< 1s)"
          elif [ $RESPONSE_TIME_MS -lt 2000 ]; then
            PERFORMANCE_SCORE=80
            echo "‚úÖ Good performance (< 2s)"
          elif [ $RESPONSE_TIME_MS -lt 3000 ]; then
            PERFORMANCE_SCORE=60
            echo "‚ö†Ô∏è Acceptable performance (< 3s)"
          else
            PERFORMANCE_SCORE=40
            echo "‚ùå Poor performance (> 3s)"
          fi
          
          echo "performance-score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
          echo "‚ö° Performance score: $PERFORMANCE_SCORE/100"
          
          # Require at least 60/100 performance score
          if [ $PERFORMANCE_SCORE -ge 60 ]; then
            echo "‚úÖ Performance test passed"
          else
            echo "‚ùå Performance test failed (minimum 60/100 required)"
            exit 1
          fi

      - name: üîç OWASP ZAP Security Scan
        id: zap-scan
        run: |
          echo "üîç Running OWASP ZAP security scan..."
          
          # Install ZAP
          wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
          tar -xzf ZAP_2.14.0_Linux.tar.gz
          chmod +x ZAP_2.14.0/zap.sh
          
          # Start ZAP in daemon mode
          ./ZAP_2.14.0/zap.sh -daemon -host 0.0.0.0 -port 8080 &
          sleep 10
          
          # Run baseline scan with access key
          STAGING_URL="https://staging.robertconsulting.net"
          ACCESS_KEY="staging-access-2025"
          ./ZAP_2.14.0/zap-cli.sh quick-scan --self-contained --start-options '-config api.disablekey=true' "$STAGING_URL/?key=$ACCESS_KEY"
          
          # Get scan results
          SCAN_RESULTS=$(./ZAP_2.14.0/zap-cli.sh alerts --self-contained --start-options '-config api.disablekey=true')
          
          # Count issues by severity
          HIGH_ISSUES=$(echo "$SCAN_RESULTS" | grep -c "High" || echo "0")
          MEDIUM_ISSUES=$(echo "$SCAN_RESULTS" | grep -c "Medium" || echo "0")
          LOW_ISSUES=$(echo "$SCAN_RESULTS" | grep -c "Low" || echo "0")
          
          echo "üîç ZAP Scan Results:"
          echo "  High: $HIGH_ISSUES"
          echo "  Medium: $MEDIUM_ISSUES"
          echo "  Low: $LOW_ISSUES"
          
          # Fail if high severity issues found
          if [ $HIGH_ISSUES -gt 0 ]; then
            echo "‚ùå ZAP scan failed: $HIGH_ISSUES high severity issues found"
            exit 1
          else
            echo "‚úÖ ZAP scan passed: No high severity issues found"
          fi

      - name: üìä Test Results Summary
        id: test-results
        run: |
          echo "üìä Test Results Summary:"
          echo "  ‚úÖ Basic Functionality: Passed"
          echo "  ‚úÖ Security Headers: Passed (${{ steps.security-test.outputs.security-score }}/8)"
          echo "  ‚úÖ Performance: Passed (${{ steps.performance-test.outputs.performance-score }}/100)"
          echo "  ‚úÖ OWASP ZAP Scan: Passed"
          echo ""
          echo "all-tests-passed=true" >> $GITHUB_OUTPUT
          echo "üéâ All tests passed! Ready for production deployment."

  # Stage 3: Production Deployment
  deploy-to-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-to-staging, comprehensive-testing]
    if: ${{ always() && (needs.comprehensive-testing.outputs.tests-passed == 'true' || inputs.skip_tests == true) }}
    environment: production-deployment
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: üöÄ Deploy to Production
        run: |
          echo "üöÄ Deploying to production environment..."
          
          # Deploy website files to production S3
          aws s3 sync website/ s3://${{ env.PRODUCTION_BUCKET }}/ \
            --exclude "*.md" \
            --exclude "*.json" \
            --exclude "*.txt" \
            --exclude "*.log" \
            --exclude "terraform/*" \
            --exclude "backup/*" \
            --exclude "scripts/*" \
            --exclude "lambda/*" \
            --exclude "admin/*"
          
          # Create CloudFront invalidation for production
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.PRODUCTION_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "‚úÖ Production deployment completed"
          echo "üîó Production URL: https://robertconsulting.net"
          echo "üîÑ Invalidation ID: $INVALIDATION_ID"

      - name: üìä Deployment Summary
        run: |
          echo "## üöÄ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging URL**: https://staging.robertconsulting.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Production URL**: https://robertconsulting.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests Skipped**: ${{ inputs.skip_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.skip_tests }}" != "true" ]; then
            echo "### üß™ Test Results:" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Score**: ${{ needs.comprehensive-testing.outputs.security-score }}/8" >> $GITHUB_STEP_SUMMARY
            echo "- **Performance Score**: ${{ needs.comprehensive-testing.outputs.performance-score }}/100" >> $GITHUB_STEP_SUMMARY
            echo "- **All Tests**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéâ Status: Successfully deployed to production!" >> $GITHUB_STEP_SUMMARY

  # Stage 4: Post-Deployment Validation
  post-deployment-validation:
    name: ‚úÖ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: ${{ success() }}
    steps:
      - name: üîß Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: ‚úÖ Validate Production Deployment
        run: |
          echo "‚úÖ Validating production deployment..."
          
          PRODUCTION_URL="https://robertconsulting.net"
          
          # Test main pages
          if curl -s -o /dev/null -w "%{http_code}" "$PRODUCTION_URL/" | grep -q "200"; then
            echo "‚úÖ Production homepage accessible"
          else
            echo "‚ùå Production homepage not accessible"
            exit 1
          fi
          
          if curl -s -o /dev/null -w "%{http_code}" "$PRODUCTION_URL/dashboard.html" | grep -q "200"; then
            echo "‚úÖ Production dashboard accessible"
          else
            echo "‚ùå Production dashboard not accessible"
            exit 1
          fi
          
          echo "üéâ Production deployment validation successful!"
