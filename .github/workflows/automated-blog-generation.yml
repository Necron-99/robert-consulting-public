name: Automated Blog Generation

on:
  schedule:
    - cron: '0 9 * * 1-5'  # Run at 9 AM Monday-Friday
  workflow_dispatch:
    inputs:
      day:
        description: 'Day of the week to generate blog for'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - monday
          - tuesday
          - wednesday
          - thursday
          - friday

jobs:
  generate-blog:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install -g @aws-cli/aws-cli
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1
          
      - name: Determine blog day
        id: blog-day
        run: |
          if [ "${{ github.event.inputs.day }}" = "auto" ] || [ -z "${{ github.event.inputs.day }}" ]; then
            DAY=$(date +%A | tr '[:upper:]' '[:lower:]')
          else
            DAY="${{ github.event.inputs.day }}"
          fi
          echo "day=$DAY" >> $GITHUB_OUTPUT
          echo "📅 Generating blog for: $DAY"
          
      - name: Generate blog content
        id: generate-content
        run: |
          DAY="${{ steps.blog-day.outputs.day }}"
          DATE=$(date +%Y-%m-%d)
          BLOG_FILENAME="website/blog-posts/${DAY}-${DATE}.html"
          
          # Set topic and focus based on day
          case "$DAY" in
            "monday")
              TOPIC="AWS Services and Updates"
              FOCUS="Latest AWS releases, feature updates, impact analysis"
              KEYWORDS="AWS, cloud services, updates, new features, AWS announcements"
              ;;
            "tuesday")
              TOPIC="AIOps"
              FOCUS="Artificial Intelligence for IT Operations, predictive analytics, automation"
              KEYWORDS="AIOps, machine learning, IT operations, automation, predictive analytics"
              ;;
            "wednesday")
              TOPIC="Intelligent Vulnerability Remediation"
              FOCUS="AI-powered security, threat detection, automated remediation"
              KEYWORDS="vulnerability management, security automation, AI security, threat detection, remediation"
              ;;
            "thursday")
              TOPIC="OpenTofu Analysis"
              FOCUS="Comprehensive comparison with Terraform, pros/cons, migration strategies"
              KEYWORDS="OpenTofu, Terraform, infrastructure as code, open source, comparison"
              ;;
            "friday")
              TOPIC="Platform Market Analysis"
              FOCUS="Domo, OpenShift, and other enterprise platform players"
              KEYWORDS="Domo, OpenShift, platform comparison, enterprise platforms, market analysis"
              ;;
            *)
              echo "❌ Invalid day: $DAY"
              exit 1
              ;;
          esac
          
          # Use the external script to generate detailed content
          ./scripts/generate-detailed-blog.sh "$DAY" "$TOPIC" "$FOCUS" "$KEYWORDS" "$DATE" "$BLOG_FILENAME"
          
          echo "blog-generated=true" >> $GITHUB_OUTPUT
          echo "blog-filename=$BLOG_FILENAME" >> $GITHUB_OUTPUT
          echo "✅ Blog generated: $BLOG_FILENAME"
          
      - name: Upload to S3
        if: steps.generate-content.outputs.blog-generated == 'true'
        run: |
          BLOG_FILENAME="${{ steps.generate-content.outputs.blog-filename }}"
          aws s3 cp "$BLOG_FILENAME" "s3://robert-consulting-website/blog-posts/"
          echo "📤 Uploaded to S3: $BLOG_FILENAME"
          
      - name: Invalidate CloudFront
        if: steps.generate-content.outputs.blog-generated == 'true'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/blog-posts/*"
          echo "🔄 CloudFront cache invalidated"
          
      - name: Commit and push changes
        if: steps.generate-content.outputs.blog-generated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "📝 Auto-generated blog post for ${{ steps.blog-day.outputs.day }}"
          git push origin main
          echo "✅ Changes committed and pushed"