name: üìã Comprehensive Issue Management System

on:
  schedule:
    # Run every 6 hours to monitor and manage issues
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      issue_type:
        description: 'Type of issue management to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - quality
          - deployment
          - cleanup
  issues:
    types: [opened, closed, edited, labeled, unlabeled]
  pull_request:
    types: [opened, closed, labeled, unlabeled]

env:
  ISSUE_CATEGORIES: "security,quality,deployment,bug,enhancement,documentation"

jobs:
  # =============================================================================
  # ISSUE CLASSIFICATION AND ROUTING
  # =============================================================================
  
  issue-classification:
    name: üè∑Ô∏è Issue Classification & Routing
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    outputs:
      issue_type: ${{ steps.classify.outputs.type }}
      priority: ${{ steps.classify.outputs.priority }}
      assignee: ${{ steps.classify.outputs.assignee }}
      labels: ${{ steps.classify.outputs.labels }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üè∑Ô∏è Classify Issue
      id: classify
      uses: actions/github-script@v8
      with:
        script: |
          const issue = context.payload.issue || context.payload.pull_request;
          const title = issue.title.toLowerCase();
          const body = (issue.body || '').toLowerCase();
          const labels = issue.labels.map(l => l.name.toLowerCase());
          
          let issueType = 'general';
          let priority = 'medium';
          let assignee = null;
          let suggestedLabels = [];
          
          // Security classification
          if (title.includes('security') || title.includes('vulnerability') || 
              body.includes('security') || body.includes('vulnerability') ||
              labels.includes('security')) {
            issueType = 'security';
            priority = 'high';
            suggestedLabels.push('security', 'needs-triage');
            
            if (title.includes('critical') || body.includes('critical')) {
              priority = 'critical';
              suggestedLabels.push('critical', 'blocking');
            }
          }
          
          // Quality classification
          else if (title.includes('quality') || title.includes('lint') || 
                   title.includes('code quality') || labels.includes('quality')) {
            issueType = 'quality';
            priority = 'medium';
            suggestedLabels.push('quality', 'code-review');
          }
          
          // Deployment classification
          else if (title.includes('deploy') || title.includes('pipeline') || 
                   title.includes('ci/cd') || labels.includes('deployment')) {
            issueType = 'deployment';
            priority = 'high';
            suggestedLabels.push('deployment', 'ci-cd');
          }
          
          // Bug classification
          else if (title.includes('bug') || title.includes('fix') || 
                   title.includes('error') || labels.includes('bug')) {
            issueType = 'bug';
            priority = 'medium';
            suggestedLabels.push('bug', 'needs-investigation');
          }
          
          // Enhancement classification
          else if (title.includes('feature') || title.includes('enhancement') || 
                   title.includes('improvement') || labels.includes('enhancement')) {
            issueType = 'enhancement';
            priority = 'low';
            suggestedLabels.push('enhancement', 'feature-request');
          }
          
          // Documentation classification
          else if (title.includes('doc') || title.includes('documentation') || 
                   labels.includes('documentation')) {
            issueType = 'documentation';
            priority = 'low';
            suggestedLabels.push('documentation', 'good-first-issue');
          }
          
          // Auto-assign based on type
          if (issueType === 'security') {
            assignee = 'Necron-99'; // Assign to security lead
          } else if (issueType === 'deployment') {
            assignee = 'Necron-99'; // Assign to DevOps lead
          }
          
          return {
            type: issueType,
            priority: priority,
            assignee: assignee,
            labels: suggestedLabels.join(',')
          };

    - name: üè∑Ô∏è Apply Classification
      if: steps.classify.outputs.type != 'general'
      uses: actions/github-script@v8
      with:
        script: |
          const issue = context.payload.issue || context.payload.pull_request;
          const issueNumber = issue.number;
          const labels = '${{ steps.classify.outputs.labels }}'.split(',').filter(l => l);
          const assignee = '${{ steps.classify.outputs.assignee }}';
          
          // Add labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: labels
            });
          }
          
          // Assign if specified
          if (assignee && assignee !== 'null') {
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                assignees: [assignee]
              });
            } catch (error) {
              console.log('Could not assign issue:', error.message);
            }
          }
          
          // Add classification comment
          const comment = [
            '## ü§ñ Automated Issue Classification',
            '',
            `**Type:** ${{ steps.classify.outputs.type }}`,
            `**Priority:** ${{ steps.classify.outputs.priority }}`,
            `**Labels Applied:** ${labels.join(', ')}`,
            assignee ? `**Assigned to:** @${assignee}` : '',
            '',
            'This issue has been automatically classified and routed. Please review and adjust if needed.',
            '',
            '---',
            '*Classification performed by the Issue Management System*'
          ].filter(line => line).join('\n');
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: comment
          });

  # =============================================================================
  # SECURITY ISSUE MANAGEMENT
  # =============================================================================
  
  security-issue-management:
    name: üîí Security Issue Management
    runs-on: ubuntu-latest
    needs: issue-classification
    if: always() && (needs.issue-classification.outputs.issue_type == 'security' || inputs.issue_type == 'security' || inputs.issue_type == 'all')
    permissions:
      contents: read
      issues: write
      security-events: read
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üîç Scan for Security Issues
      uses: actions/github-script@v8
      with:
        script: |
          // Get all open security issues
          const { data: securityIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security'],
            state: 'open',
            sort: 'created',
            direction: 'desc'
          });
          
          console.log(`Found ${securityIssues.length} open security issues`);
          
          for (const issue of securityIssues) {
            const labels = issue.labels.map(l => l.name);
            const isCritical = labels.includes('critical');
            const isHigh = labels.includes('high');
            const isBlocking = labels.includes('blocking');
            
            // Check if issue needs escalation
            const createdAt = new Date(issue.created_at);
            const daysSinceCreated = Math.floor((new Date() - createdAt) / (1000 * 60 * 60 * 24));
            
            let needsEscalation = false;
            let escalationReason = '';
            
            if (isCritical && daysSinceCreated >= 1) {
              needsEscalation = true;
              escalationReason = 'Critical security issue open for more than 1 day';
            } else if (isHigh && daysSinceCreated >= 3) {
              needsEscalation = true;
              escalationReason = 'High severity security issue open for more than 3 days';
            } else if (isBlocking && daysSinceCreated >= 7) {
              needsEscalation = true;
              escalationReason = 'Blocking security issue open for more than 7 days';
            }
            
            if (needsEscalation) {
              // Add escalation comment
              const escalationComment = [
                '## üö® Security Issue Escalation',
                '',
                `**Issue Age:** ${daysSinceCreated} days`,
                `**Reason:** ${escalationReason}`,
                '',
                '### ‚ö†Ô∏è Action Required',
                '',
                'This security issue requires immediate attention:',
                '',
                '1. **Review** the issue details and impact',
                '2. **Prioritize** based on severity and business impact',
                '3. **Assign** appropriate resources for resolution',
                '4. **Update** issue with progress and timeline',
                '',
                '### üìã Escalation Criteria',
                '',
                '- **Critical:** Must be resolved within 24 hours',
                '- **High:** Must be resolved within 72 hours',
                '- **Blocking:** Must be resolved within 1 week',
                '',
                '---',
                '*Escalation performed by the Security Issue Management System*'
              ].join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: escalationComment
              });
              
              // Add escalation label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['escalated', 'needs-immediate-attention']
              });
              
              console.log(`Escalated security issue #${issue.number}: ${escalationReason}`);
            }
          }

    - name: üìä Security Issue Summary
      uses: actions/github-script@v8
      with:
        script: |
          const { data: allSecurityIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security'],
            state: 'all',
            sort: 'created',
            direction: 'desc',
            per_page: 100
          });
          
          const openIssues = allSecurityIssues.filter(issue => issue.state === 'open');
          const closedIssues = allSecurityIssues.filter(issue => issue.state === 'closed');
          
          const criticalOpen = openIssues.filter(issue => 
            issue.labels.some(label => label.name === 'critical')
          ).length;
          
          const highOpen = openIssues.filter(issue => 
            issue.labels.some(label => label.name === 'high')
          ).length;
          
          const escalatedOpen = openIssues.filter(issue => 
            issue.labels.some(label => label.name === 'escalated')
          ).length;
          
          const summary = [
            '## üîí Security Issue Management Summary',
            '',
            `**Total Security Issues:** ${allSecurityIssues.length}`,
            `**Open Issues:** ${openIssues.length}`,
            `**Closed Issues:** ${closedIssues.length}`,
            '',
            '### üìä Open Issues by Severity',
            '',
            `- üî¥ **Critical:** ${criticalOpen}`,
            `- üü† **High:** ${highOpen}`,
            `- ‚ö†Ô∏è **Escalated:** ${escalatedOpen}`,
            '',
            '### üéØ Action Items',
            '',
            criticalOpen > 0 ? `- üö® **${criticalOpen} critical issues** require immediate attention` : '- ‚úÖ No critical security issues',
            highOpen > 0 ? `- ‚ö†Ô∏è **${highOpen} high severity issues** need resolution` : '- ‚úÖ No high severity security issues',
            escalatedOpen > 0 ? `- üì¢ **${escalatedOpen} escalated issues** need management attention` : '- ‚úÖ No escalated security issues',
            '',
            '---',
            '*Summary generated by the Security Issue Management System*'
          ].join('\n');
          
          console.log(summary);

  # =============================================================================
  # QUALITY ISSUE MANAGEMENT
  # =============================================================================
  
  quality-issue-management:
    name: üßπ Quality Issue Management
    runs-on: ubuntu-latest
    needs: issue-classification
    if: always() && (needs.issue-classification.outputs.issue_type == 'quality' || inputs.issue_type == 'quality' || inputs.issue_type == 'all')
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üßπ Quality Issue Processing
      uses: actions/github-script@v8
      with:
        script: |
          // Get all open quality issues
          const { data: qualityIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['quality'],
            state: 'open',
            sort: 'created',
            direction: 'desc'
          });
          
          console.log(`Found ${qualityIssues.length} open quality issues`);
          
          for (const issue of qualityIssues) {
            const labels = issue.labels.map(l => l.name);
            const isCodeQuality = labels.includes('code-quality');
            const isLinting = labels.includes('linting');
            const isPerformance = labels.includes('performance');
            
            // Check for stale quality issues
            const createdAt = new Date(issue.created_at);
            const daysSinceCreated = Math.floor((new Date() - createdAt) / (1000 * 60 * 60 * 24));
            
            if (daysSinceCreated >= 14) { // 2 weeks
              // Add stale quality issue comment
              const staleComment = [
                '## üìÖ Quality Issue Review',
                '',
                `**Issue Age:** ${daysSinceCreated} days`,
                '',
                '### üîç Review Required',
                '',
                'This quality issue has been open for more than 2 weeks. Please review:',
                '',
                '1. **Is this still relevant?**',
                '2. **Has it been addressed in other work?**',
                '3. **Should it be prioritized or closed?**',
                '',
                '### üìã Quality Standards',
                '',
                '- **Code Quality:** Maintain high standards for maintainability',
                '- **Performance:** Ensure optimal application performance',
                '- **Linting:** Keep code clean and consistent',
                '',
                '---',
                '*Review reminder from the Quality Issue Management System*'
              ].join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: staleComment
              });
              
              // Add review label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['needs-review', 'stale']
              });
              
              console.log(`Marked quality issue #${issue.number} as stale (${daysSinceCreated} days old)`);
            }
          }

  # =============================================================================
  # DEPLOYMENT ISSUE MANAGEMENT
  # =============================================================================
  
  deployment-issue-management:
    name: üöÄ Deployment Issue Management
    runs-on: ubuntu-latest
    needs: issue-classification
    if: always() && (needs.issue-classification.outputs.issue_type == 'deployment' || inputs.issue_type == 'deployment' || inputs.issue_type == 'all')
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üöÄ Deployment Issue Processing
      uses: actions/github-script@v8
      with:
        script: |
          // Get all open deployment issues
          const { data: deploymentIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['deployment'],
            state: 'open',
            sort: 'created',
            direction: 'desc'
          });
          
          console.log(`Found ${deploymentIssues.length} open deployment issues`);
          
          for (const issue of deploymentIssues) {
            const labels = issue.labels.map(l => l.name);
            const isPipeline = labels.includes('pipeline');
            const isCI = labels.includes('ci-cd');
            const isBlocking = labels.includes('blocking');
            
            // Check for urgent deployment issues
            const createdAt = new Date(issue.created_at);
            const daysSinceCreated = Math.floor((new Date() - createdAt) / (1000 * 60 * 60 * 24));
            
            if (isBlocking && daysSinceCreated >= 1) {
              // Add urgent deployment comment
              const urgentComment = [
                '## üö® Urgent Deployment Issue',
                '',
                `**Issue Age:** ${daysSinceCreated} days`,
                '**Status:** Blocking deployment',
                '',
                '### ‚ö†Ô∏è Immediate Action Required',
                '',
                'This deployment issue is blocking releases:',
                '',
                '1. **Assess** the impact on current deployments',
                '2. **Implement** a fix or workaround',
                '3. **Test** the solution in staging',
                '4. **Deploy** the fix to unblock releases',
                '',
                '### üöÄ Deployment Priority',
                '',
                'Blocking deployment issues should be resolved within 24 hours to maintain release velocity.',
                '',
                '---',
                '*Urgent deployment issue alert from the Deployment Issue Management System*'
              ].join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: urgentComment
              });
              
              // Add urgent label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['urgent', 'deployment-blocking']
              });
              
              console.log(`Marked deployment issue #${issue.number} as urgent (blocking for ${daysSinceCreated} days)`);
            }
          }

  # =============================================================================
  # ISSUE CLEANUP AND MAINTENANCE
  # =============================================================================
  
  issue-cleanup:
    name: üßπ Issue Cleanup & Maintenance
    runs-on: ubuntu-latest
    if: inputs.issue_type == 'cleanup' || inputs.issue_type == 'all'
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üßπ Cleanup Old Issues
      uses: actions/github-script@v8
      with:
        script: |
          // Get all closed issues older than 30 days
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          const { data: oldClosedIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed',
            since: thirtyDaysAgo.toISOString(),
            sort: 'updated',
            direction: 'desc'
          });
          
          console.log(`Found ${oldClosedIssues.length} recently closed issues`);
          
          // Get issues closed more than 30 days ago
          const { data: veryOldIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed',
            sort: 'updated',
            direction: 'asc',
            per_page: 50
          });
          
          const oldIssues = veryOldIssues.filter(issue => {
            const closedAt = new Date(issue.closed_at);
            return closedAt < thirtyDaysAgo;
          });
          
          console.log(`Found ${oldIssues.length} issues closed more than 30 days ago`);
          
          // Add archive notice to very old issues
          for (const issue of oldIssues.slice(0, 10)) { // Limit to 10 per run
            const closedAt = new Date(issue.closed_at);
            const daysSinceClosed = Math.floor((new Date() - closedAt) / (1000 * 60 * 60 * 24));
            
            // Check if already has archive notice
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number
            });
            
            const hasArchiveNotice = comments.some(comment => 
              comment.body.includes('Archive Notice')
            );
            
            if (!hasArchiveNotice) {
              const archiveComment = [
                '## üìÅ Archive Notice',
                '',
                `This issue has been resolved for ${daysSinceClosed} days and can be archived.`,
                '',
                '**Status:** Resolved and stable',
                `**Days since resolution:** ${daysSinceClosed}`,
                '**Action:** Consider archiving this issue',
                '',
                '---',
                '*Archive notice from the Issue Management System*'
              ].join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: archiveComment
              });
              
              console.log(`Added archive notice to issue #${issue.number} (closed ${daysSinceClosed} days ago)`);
            }
          }

    - name: üìä Issue Statistics
      uses: actions/github-script@v8
      with:
        script: |
          // Get comprehensive issue statistics
          const { data: allIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'all',
            sort: 'created',
            direction: 'desc',
            per_page: 100
          });
          
          const openIssues = allIssues.filter(issue => issue.state === 'open');
          const closedIssues = allIssues.filter(issue => issue.state === 'closed');
          
          // Categorize by labels
          const securityIssues = allIssues.filter(issue => 
            issue.labels.some(label => label.name === 'security')
          );
          const qualityIssues = allIssues.filter(issue => 
            issue.labels.some(label => label.name === 'quality')
          );
          const deploymentIssues = allIssues.filter(issue => 
            issue.labels.some(label => label.name === 'deployment')
          );
          const bugIssues = allIssues.filter(issue => 
            issue.labels.some(label => label.name === 'bug')
          );
          const enhancementIssues = allIssues.filter(issue => 
            issue.labels.some(label => label.name === 'enhancement')
          );
          
          const statistics = [
            '## üìä Issue Management Statistics',
            '',
            '### üìà Overall Statistics',
            '',
            `**Total Issues:** ${allIssues.length}`,
            `**Open Issues:** ${openIssues.length}`,
            `**Closed Issues:** ${closedIssues.length}`,
            `**Resolution Rate:** ${Math.round((closedIssues.length / allIssues.length) * 100)}%`,
            '',
            '### üè∑Ô∏è Issues by Category',
            '',
            `- üîí **Security:** ${securityIssues.length}`,
            `- üßπ **Quality:** ${qualityIssues.length}`,
            `- üöÄ **Deployment:** ${deploymentIssues.length}`,
            `- üêõ **Bugs:** ${bugIssues.length}`,
            `- ‚ú® **Enhancements:** ${enhancementIssues.length}`,
            '',
            '### üìÖ Recent Activity',
            '',
            `- **Last 7 days:** ${allIssues.filter(issue => {
              const created = new Date(issue.created_at);
              const weekAgo = new Date();
              weekAgo.setDate(weekAgo.getDate() - 7);
              return created > weekAgo;
            }).length} new issues`,
            '',
            '---',
            '*Statistics generated by the Issue Management System*'
          ].join('\n');
          
          console.log(statistics);

  # =============================================================================
  # NOTIFICATION AND REPORTING
  # =============================================================================
  
  notification-summary:
    name: üì¢ Notification & Summary
    runs-on: ubuntu-latest
    needs: [security-issue-management, quality-issue-management, deployment-issue-management, issue-cleanup]
    if: always()
    
    steps:
    - name: üì¢ Generate Management Summary
      uses: actions/github-script@v8
      with:
        script: |
          const summary = [
            '## üìã Issue Management System Summary',
            '',
            '### üîÑ System Status',
            '',
            '‚úÖ **Issue Classification:** Active',
            '‚úÖ **Security Management:** Active',
            '‚úÖ **Quality Management:** Active',
            '‚úÖ **Deployment Management:** Active',
            '‚úÖ **Cleanup & Maintenance:** Active',
            '',
            '### üéØ Key Features',
            '',
            '- **Automated Classification:** Issues are automatically categorized and routed',
            '- **Security Escalation:** Critical and high severity issues are escalated',
            '- **Quality Monitoring:** Stale quality issues are flagged for review',
            '- **Deployment Alerts:** Blocking deployment issues trigger urgent notifications',
            '- **Cleanup Automation:** Old resolved issues are marked for archiving',
            '',
            '### üìä Management Actions',
            '',
            'The system has performed the following actions:',
            '',
            '- üîç **Scanned** all open issues for classification',
            '- üö® **Escalated** security issues requiring immediate attention',
            '- üìÖ **Flagged** stale quality issues for review',
            '- üöÄ **Alerted** on blocking deployment issues',
            '- üßπ **Cleaned up** old resolved issues',
            '',
            '### üîó Resources',
            '',
            '- [Security Issues](https://github.com/${{ github.repository }}/issues?q=is%3Aopen+label%3Asecurity)',
            '- [Quality Issues](https://github.com/${{ github.repository }}/issues?q=is%3Aopen+label%3Aquality)',
            '- [Deployment Issues](https://github.com/${{ github.repository }}/issues?q=is%3Aopen+label%3Adeployment)',
            '- [All Open Issues](https://github.com/${{ github.repository }}/issues?q=is%3Aopen)',
            '',
            '---',
            '*Summary generated by the Comprehensive Issue Management System*'
          ].join('\n');
          
          await core.summary
            .addHeading('Issue Management System')
            .addRaw(summary)
            .write();
