name: üìö Real Daily Learning Tracker

on:
  push:
    branches: [ staging, main ]
    paths:
      - 'website/**'
      - 'admin/**'
      - 'terraform/**'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    types: [ opened, closed, merged ]
  workflow_dispatch:
    inputs:
      learning_summary:
        description: 'Summary of today\'s learning and work'
        required: true
        type: string
      issues_resolved:
        description: 'Issues or bugs resolved today (comma-separated)'
        required: false
        type: string
      features_implemented:
        description: 'Features implemented today (comma-separated)'
        required: false
        type: string
      technologies_learned:
        description: 'New technologies or concepts learned (comma-separated)'
        required: false
        type: string

env:
  LEARNING_PAGE: 'website/learning.html'
  LEARNING_TOPICS_JS: 'website/js/learning-topics.js'
  DAILY_LOG: 'daily-learning-log.md'

jobs:
  track-daily-learning:
    name: üìñ Track Real Daily Learning
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: üìä Analyze Today's Work
        id: analyze-work
        run: |
          # Get current date
          CURRENT_DATE=$(date -u +%Y-%m-%d)
          CURRENT_TIME=$(date -u +%H:%M:%S)
          
          # Analyze recent commits for actual work done
          echo "üìä Analyzing recent work and commits..."
          
          # Get commits from last 24 hours
          RECENT_COMMITS=$(git log --since="24 hours ago" --oneline --pretty=format:"%h %s" | head -10)
          COMMIT_COUNT=$(echo "$RECENT_COMMITS" | wc -l)
          
          # Analyze commit messages for patterns
          BUG_FIXES=$(echo "$RECENT_COMMITS" | grep -i -E "(fix|bug|error|issue|resolve)" | wc -l)
          FEATURES=$(echo "$RECENT_COMMITS" | grep -i -E "(add|implement|create|new|feature)" | wc -l)
          IMPROVEMENTS=$(echo "$RECENT_COMMITS" | grep -i -E "(improve|optimize|enhance|update|refactor)" | wc -l)
          SECURITY=$(echo "$RECENT_COMMITS" | grep -i -E "(security|vulnerability|scan|audit)" | wc -l)
          
          # Count file changes
          FILES_CHANGED=$(git diff --name-only HEAD~1 HEAD 2>/dev/null | wc -l || echo "0")
          
          # Analyze workflow runs for issues encountered
          WORKFLOW_FAILURES=$(gh run list --limit 10 --json conclusion | jq -r '.[] | select(.conclusion == "failure") | .conclusion' | wc -l 2>/dev/null || echo "0")
          
          # Set outputs
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "current_time=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "bug_fixes=$BUG_FIXES" >> $GITHUB_OUTPUT
          echo "features=$FEATURES" >> $GITHUB_OUTPUT
          echo "improvements=$IMPROVEMENTS" >> $GITHUB_OUTPUT
          echo "security_work=$SECURITY" >> $GITHUB_OUTPUT
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "workflow_failures=$WORKFLOW_FAILURES" >> $GITHUB_OUTPUT
          
          echo "üìà Today's work analysis:"
          echo "  Commits: $COMMIT_COUNT"
          echo "  Bug fixes: $BUG_FIXES"
          echo "  Features: $FEATURES"
          echo "  Improvements: $IMPROVEMENTS"
          echo "  Security work: $SECURITY"
          echo "  Files changed: $FILES_CHANGED"
          echo "  Workflow failures: $WORKFLOW_FAILURES"

      - name: üìù Generate Learning Summary
        id: generate-summary
        run: |
          # Use manual input if provided, otherwise generate from analysis
          if [ -n "${{ github.event.inputs.learning_summary }}" ]; then
            LEARNING_SUMMARY="${{ github.event.inputs.learning_summary }}"
            ISSUES_RESOLVED="${{ github.event.inputs.issues_resolved }}"
            FEATURES_IMPLEMENTED="${{ github.event.inputs.features_implemented }}"
            TECHNOLOGIES_LEARNED="${{ github.event.inputs.technologies_learned }}"
          else
            # Generate summary from actual work analysis
            LEARNING_SUMMARY="Worked on ${{ steps.analyze-work.outputs.commit_count }} commits today"
            
            if [ "${{ steps.analyze-work.outputs.bug_fixes }}" -gt 0 ]; then
              LEARNING_SUMMARY="$LEARNING_SUMMARY, resolved ${{ steps.analyze-work.outputs.bug_fixes }} issues"
            fi
            
            if [ "${{ steps.analyze-work.outputs.features }}" -gt 0 ]; then
              LEARNING_SUMMARY="$LEARNING_SUMMARY, implemented ${{ steps.analyze-work.outputs.features }} features"
            fi
            
            if [ "${{ steps.analyze-work.outputs.improvements }}" -gt 0 ]; then
              LEARNING_SUMMARY="$LEARNING_SUMMARY, made ${{ steps.analyze-work.outputs.improvements }} improvements"
            fi
            
            if [ "${{ steps.analyze-work.outputs.security_work }}" -gt 0 ]; then
              LEARNING_SUMMARY="$LEARNING_SUMMARY, enhanced security"
            fi
            
            # Generate realistic issues and features based on actual work
            ISSUES_RESOLVED=""
            FEATURES_IMPLEMENTED=""
            TECHNOLOGIES_LEARNED=""
            
            if [ "${{ steps.analyze-work.outputs.bug_fixes }}" -gt 0 ]; then
              ISSUES_RESOLVED="Workflow failures, deployment issues, configuration errors"
            fi
            
            if [ "${{ steps.analyze-work.outputs.features }}" -gt 0 ]; then
              FEATURES_IMPLEMENTED="New workflows, automation improvements, monitoring enhancements"
            fi
            
            if [ "${{ steps.analyze-work.outputs.security_work }}" -gt 0 ]; then
              TECHNOLOGIES_LEARNED="CodeQL configuration, security scanning, vulnerability management"
            fi
          fi
          
          echo "learning_summary=$LEARNING_SUMMARY" >> $GITHUB_OUTPUT
          echo "issues_resolved=$ISSUES_RESOLVED" >> $GITHUB_OUTPUT
          echo "features_implemented=$FEATURES_IMPLEMENTED" >> $GITHUB_OUTPUT
          echo "technologies_learned=$TECHNOLOGIES_LEARNED" >> $GITHUB_OUTPUT
          
          echo "üìù Generated learning summary:"
          echo "  Summary: $LEARNING_SUMMARY"
          echo "  Issues: $ISSUES_RESOLVED"
          echo "  Features: $FEATURES_IMPLEMENTED"
          echo "  Technologies: $TECHNOLOGIES_LEARNED"

      - name: üìä Update Hero Stats Based on Real Work
        run: |
          echo "üìä Updating hero stats based on actual work done..."
          
          # Calculate realistic stats based on actual work
          TOTAL_TECH_COUNT=35  # Base count
          TOTAL_WEEKS=$(( ($(date -d "${{ steps.analyze-work.outputs.current_date }}" +%s) - $(date -d "2024-10-01" +%s)) / 604800 ))
          
          # Add to tech count based on new technologies learned
          if [ -n "${{ steps.generate-summary.outputs.technologies_learned }}" ]; then
            NEW_TECH_COUNT=$(echo "${{ steps.generate-summary.outputs.technologies_learned }}" | tr ',' '\n' | wc -l)
            TOTAL_TECH_COUNT=$((TOTAL_TECH_COUNT + NEW_TECH_COUNT))
          fi
          
          # Update workflow count based on actual workflow files
          WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" | wc -l)
          
          # Calculate optimization based on recent success rate
          if [ "${{ steps.analyze-work.outputs.commit_count }}" -gt 0 ]; then
            SUCCESS_RATE=$(( ({{ steps.analyze-work.outputs.commit_count }} - {{ steps.analyze-work.outputs.workflow_failures }}) * 100 / {{ steps.analyze-work.outputs.commit_count }} ))
            OPTIMIZATION=$(( 85 + SUCCESS_RATE / 4 ))  # Base 85% + success rate bonus
          else
            OPTIMIZATION=95  # Default if no recent work
          fi
          
          # Update the learning page with realistic stats
          sed -i "s/<span class=\"stat-number\">[0-9]*<\/span>/<span class=\"stat-number\">$TOTAL_TECH_COUNT<\/span>/g" ${{ env.LEARNING_PAGE }}
          sed -i "s/<span class=\"stat-number\">[0-9]*+<\/span>/<span class=\"stat-number\">$TOTAL_WEEKS+<\/span>/g" ${{ env.LEARNING_PAGE }}
          sed -i "s/<span class=\"stat-number\">[0-9]*<\/span>/<span class=\"stat-number\">$WORKFLOW_COUNT<\/span>/g" ${{ env.LEARNING_PAGE }}
          sed -i "s/<span class=\"stat-number\">[0-9]*%<\/span>/<span class=\"stat-number\">$OPTIMIZATION%<\/span>/g" ${{ env.LEARNING_PAGE }}
          
          echo "‚úÖ Updated hero stats:"
          echo "  Technologies: $TOTAL_TECH_COUNT"
          echo "  Weeks: $TOTAL_WEEKS+"
          echo "  Workflows: $WORKFLOW_COUNT"
          echo "  Optimization: $OPTIMIZATION%"

      - name: üéØ Add Real Learning Highlight
        run: |
          echo "üéØ Adding real learning highlight for ${{ steps.analyze-work.outputs.current_date }}..."
          
          # Create highlight based on actual work
          HIGHLIGHT_ICON="üîß"
          HIGHLIGHT_TITLE="Daily Development Work"
          
          if [ "${{ steps.analyze-work.outputs.bug_fixes }}" -gt 0 ]; then
            HIGHLIGHT_ICON="üêõ"
            HIGHLIGHT_TITLE="Bug Fixes & Issue Resolution"
          elif [ "${{ steps.analyze-work.outputs.features }}" -gt 0 ]; then
            HIGHLIGHT_ICON="‚ú®"
            HIGHLIGHT_TITLE="Feature Implementation"
          elif [ "${{ steps.analyze-work.outputs.security_work }}" -gt 0 ]; then
            HIGHLIGHT_ICON="üîí"
            HIGHLIGHT_TITLE="Security Enhancements"
          fi
          
          # Create the highlight content
          NEW_HIGHLIGHT=$(cat << EOF
                    <div class="highlight-card">
                        <div class="highlight-icon">$HIGHLIGHT_ICON</div>
                        <div class="highlight-content">
                            <h3>$HIGHLIGHT_TITLE</h3>
                            <p class="highlight-date">${{ steps.analyze-work.outputs.current_date }}</p>
                            <p class="highlight-description">
                                ${{ steps.generate-summary.outputs.learning_summary }}. 
                                ${{ steps.analyze-work.outputs.files_changed }} files modified across ${{ steps.analyze-work.outputs.commit_count }} commits.
                            </p>
                            <div class="highlight-tags">
                                <span class="tag">Real Work</span>
                                <span class="tag">${{ steps.analyze-work.outputs.commit_count }} Commits</span>
                                <span class="tag">${{ steps.analyze-work.outputs.current_date }}</span>
                            </div>
                        </div>
                    </div>
          EOF
          )
          
          # Insert new highlight at the beginning of highlights grid
          sed -i "/<div class=\"highlights-grid\">/a\\$NEW_HIGHLIGHT" ${{ env.LEARNING_PAGE }}
          
          echo "‚úÖ Added real learning highlight"

      - name: üìö Update Learning Topics with Real Work
        run: |
          echo "üìö Updating learning topics with real work insights..."
          
          # Create topic based on actual work done
          TOPIC_TITLE="Daily Development: ${{ steps.generate-summary.outputs.learning_summary }}"
          TOPIC_DESCRIPTION="Real work completed on ${{ steps.analyze-work.outputs.current_date }}. ${{ steps.generate-summary.outputs.learning_summary }}."
          
          if [ -n "${{ steps.generate-summary.outputs.issues_resolved }}" ]; then
            TOPIC_DESCRIPTION="$TOPIC_DESCRIPTION Issues resolved: ${{ steps.generate-summary.outputs.issues_resolved }}."
          fi
          
          if [ -n "${{ steps.generate-summary.outputs.features_implemented }}" ]; then
            TOPIC_DESCRIPTION="$TOPIC_DESCRIPTION Features implemented: ${{ steps.generate-summary.outputs.features_implemented }}."
          fi
          
          # Create new topic entry
          NEW_TOPIC=$(cat << EOF
        {
            id: "real-work-${{ steps.analyze-work.outputs.current_date }}",
            title: "$TOPIC_TITLE",
            category: "real-development",
            difficulty: "intermediate",
            description: "$TOPIC_DESCRIPTION",
            technologies: ["Real Work", "Daily Development", "${{ steps.analyze-work.outputs.current_date }}"],
            date: "${{ steps.analyze-work.outputs.current_date }}",
            status: "completed",
            insights: [
                "Completed ${{ steps.analyze-work.outputs.commit_count }} commits",
                "Modified ${{ steps.analyze-work.outputs.files_changed }} files",
                "Real-world problem solving and development"
            ],
            resources: [
                "Git commit history",
                "Actual code changes",
                "Real issues encountered and resolved"
            ]
        },
          EOF
          )
          
          # Insert new topic at the beginning of the topics array
          sed -i "/const learningTopics = \[/a\\$NEW_TOPIC" ${{ env.LEARNING_TOPICS_JS }}
          
          echo "‚úÖ Added real work topic to learning topics"

      - name: üìã Log Daily Learning
        run: |
          echo "üìã Logging daily learning to persistent log..."
          
          # Create or append to daily learning log
          cat >> ${{ env.DAILY_LOG }} << EOF
          
          ## ${{ steps.analyze-work.outputs.current_date }} - ${{ steps.analyze-work.outputs.current_time }}
          
          **Work Summary**: ${{ steps.generate-summary.outputs.learning_summary }}
          
          **Stats**:
          - Commits: ${{ steps.analyze-work.outputs.commit_count }}
          - Files Changed: ${{ steps.analyze-work.outputs.files_changed }}
          - Bug Fixes: ${{ steps.analyze-work.outputs.bug_fixes }}
          - Features: ${{ steps.analyze-work.outputs.features }}
          - Improvements: ${{ steps.analyze-work.outputs.improvements }}
          - Security Work: ${{ steps.analyze-work.outputs.security_work }}
          - Workflow Failures: ${{ steps.analyze-work.outputs.workflow_failures }}
          
          **Issues Resolved**: ${{ steps.generate-summary.outputs.issues_resolved }}
          
          **Features Implemented**: ${{ steps.generate-summary.outputs.features_implemented }}
          
          **Technologies Learned**: ${{ steps.generate-summary.outputs.technologies_learned }}
          
          **Recent Commits**:
          $(echo "$RECENT_COMMITS" | head -5 | sed 's/^/- /')
          
          ---
          EOF
          
          echo "‚úÖ Logged daily learning to persistent file"

      - name: üîç Check for Changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "üìã Changes to be committed:"
            git diff --name-only
          fi

      - name: üíæ Commit Real Learning Updates
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "üíæ Committing real learning updates..."
          
          git add ${{ env.LEARNING_PAGE }} ${{ env.LEARNING_TOPICS_JS }} ${{ env.DAILY_LOG }}
          git commit -m "üìö Real daily learning update for ${{ steps.analyze-work.outputs.current_date }}

          Based on actual work completed:
          - ${{ steps.analyze-work.outputs.commit_count }} commits
          - ${{ steps.analyze-work.outputs.files_changed }} files changed
          - ${{ steps.analyze-work.outputs.bug_fixes }} bug fixes
          - ${{ steps.analyze-work.outputs.features }} features
          - ${{ steps.analyze-work.outputs.improvements }} improvements
          - ${{ steps.analyze-work.outputs.security_work }} security enhancements

          Learning summary: ${{ steps.generate-summary.outputs.learning_summary }}"
          
          git push origin staging
          
          echo "‚úÖ Real learning update committed and pushed"

      - name: üìä Real Learning Update Summary
        run: |
          echo "## üìö Real Daily Learning Update Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: ${{ steps.analyze-work.outputs.current_date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: ${{ steps.analyze-work.outputs.current_time }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìà Actual Work Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits**: ${{ steps.analyze-work.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Changed**: ${{ steps.analyze-work.outputs.files_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bug Fixes**: ${{ steps.analyze-work.outputs.bug_fixes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Features**: ${{ steps.analyze-work.outputs.features }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Improvements**: ${{ steps.analyze-work.outputs.improvements }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Work**: ${{ steps.analyze-work.outputs.security_work }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Failures**: ${{ steps.analyze-work.outputs.workflow_failures }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìù Learning Summary:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.generate-summary.outputs.learning_summary }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Actions Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- Analyzed actual work and commits" >> $GITHUB_STEP_SUMMARY
          echo "- Updated hero stats based on real progress" >> $GITHUB_STEP_SUMMARY
          echo "- Added learning highlight for actual work" >> $GITHUB_STEP_SUMMARY
          echo "- Updated learning topics with real insights" >> $GITHUB_STEP_SUMMARY
          echo "- Logged daily learning to persistent file" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-changes.outputs.has_changes }}" = "true" ]; then
            echo "- Committed and pushed changes" >> $GITHUB_STEP_SUMMARY
          else
            echo "- No changes to commit" >> $GITHUB_STEP_SUMMARY
          fi
