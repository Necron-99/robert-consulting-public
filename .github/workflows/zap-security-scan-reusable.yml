name: OWASP ZAP Security Scan (Reusable)

on:
  workflow_call:
    inputs:
      target_url:
        description: 'Target URL to scan'
        required: true
        type: string
      scan_name:
        description: 'Name for this scan (used in reports and artifacts)'
        required: true
        type: string
      fail_on_high_risk:
        description: 'Fail the workflow if high risk issues are found'
        required: false
        type: boolean
        default: false
    outputs:
      scan_exit_code:
        description: 'ZAP scan exit code (0=no issues, 1=low, 2=medium, 3=high)'
        value: ${{ jobs.zap-scan.outputs.scan_exit_code }}
      scan_passed:
        description: 'Whether the scan passed based on configured criteria'
        value: ${{ jobs.zap-scan.outputs.scan_passed }}

jobs:
  zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    outputs:
      scan_exit_code: ${{ steps.scan.outputs.zap_exit_code }}
      scan_passed: ${{ steps.scan.outputs.scan_passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🔍 OWASP ZAP Security Scan
        id: scan
        env:
          TARGET_URL: ${{ inputs.target_url }}
          SCAN_NAME: ${{ inputs.scan_name }}
        run: |
          echo "🔍 Running OWASP ZAP Security Scan..."
          echo "🎯 Target URL: ${TARGET_URL}"
          echo "📝 Scan Name: ${SCAN_NAME}"
          
          # Create reports directory
          mkdir -p reports
          chmod 777 reports
          
          # Pull the working ZAP image
          echo "📦 Pulling ZAP Docker image..."
          docker pull ghcr.io/zaproxy/zaproxy:stable
          
          # Run ZAP baseline scan
          echo "🔍 Running ZAP baseline scan..."
          if docker run --rm \
            -v $(pwd)/reports:/zap/wrk/:rw \
            -v $(pwd)/reports:/home/zap/:rw \
            --user root \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t "${TARGET_URL}" \
            -J "${SCAN_NAME}-report.json" \
            -r "${SCAN_NAME}-report.html" \
            -x "${SCAN_NAME}-report.xml" \
            -a; then
            ZAP_EXIT_CODE=0
            echo "📊 ZAP scan completed successfully with exit code: $ZAP_EXIT_CODE"
          else
            ZAP_EXIT_CODE=$?
            echo "📊 ZAP scan completed with exit code: $ZAP_EXIT_CODE"
          fi
          
          # ZAP exit codes: 0=no issues, 1=low, 2=medium, 3=high risk
          # All of these are SUCCESSFUL scans with findings, not failures
          if [ $ZAP_EXIT_CODE -eq 0 ]; then
            echo "✅ No security issues found"
            SCAN_PASSED=true
          elif [ $ZAP_EXIT_CODE -eq 1 ]; then
            echo "⚠️ Low risk security issues found (scan successful)"
            SCAN_PASSED=true
          elif [ $ZAP_EXIT_CODE -eq 2 ]; then
            echo "⚠️ Medium risk security issues found (scan successful)"
            SCAN_PASSED=true
          elif [ $ZAP_EXIT_CODE -eq 3 ]; then
            echo "⚠️ High risk security issues found (scan successful)"
            if [ "${{ inputs.fail_on_high_risk }}" = "true" ]; then
              SCAN_PASSED=false
              echo "❌ Scan failed due to high risk issues (fail_on_high_risk=true)"
            else
              SCAN_PASSED=true
              echo "✅ Scan passed (fail_on_high_risk=false)"
            fi
          else
            echo "❌ ZAP scan failed with unexpected exit code: $ZAP_EXIT_CODE"
            SCAN_PASSED=false
            exit 1  # Only fail on unexpected exit codes
          fi
          
          # Check if reports were generated
          echo "📄 Checking for generated reports..."
          if [ -f "reports/${SCAN_NAME}-report.json" ]; then
            echo "✅ JSON report generated"
          fi
          if [ -f "reports/${SCAN_NAME}-report.html" ]; then
            echo "✅ HTML report generated"
          fi
          if [ -f "reports/${SCAN_NAME}-report.xml" ]; then
            echo "✅ XML report generated"
          fi
          
          # Copy reports to root directory for artifact upload
          cp reports/*.json . 2>/dev/null || echo "⚠️ No JSON reports to copy"
          cp reports/*.html . 2>/dev/null || echo "⚠️ No HTML reports to copy"
          cp reports/*.xml . 2>/dev/null || echo "⚠️ No XML reports to copy"
          
          echo "📋 ZAP scan summary:"
          echo "Target: ${TARGET_URL}"
          echo "Scan Name: ${SCAN_NAME}"
          echo "Exit Code: $ZAP_EXIT_CODE (scan completed successfully)"
          echo "Scan Passed: $SCAN_PASSED"
          echo "Reports: Available in artifacts"
          
          # Set outputs
          echo "zap_exit_code=$ZAP_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "scan_passed=$SCAN_PASSED" >> $GITHUB_OUTPUT
          
          # Exit with appropriate code
          if [ "$SCAN_PASSED" = "true" ]; then
            exit 0
          else
            exit 1
          fi

      - name: 📤 Upload ZAP Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ inputs.scan_name }}-zap-reports
          path: |
            *.html
            *.json
            *.xml
          retention-days: 30
        continue-on-error: true

      - name: 📊 Generate Scan Summary
        if: always()
        env:
          TARGET_URL: ${{ inputs.target_url }}
          SCAN_NAME: ${{ inputs.scan_name }}
          ZAP_EXIT_CODE: ${{ steps.scan.outputs.zap_exit_code }}
          SCAN_PASSED: ${{ steps.scan.outputs.scan_passed }}
        run: |
          echo "## 🔒 OWASP ZAP Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Scanned:** ${TARGET_URL}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Name:** ${SCAN_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** Baseline" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Exit Code:** $ZAP_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Passed:** $SCAN_PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports Available:" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Report: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- JSON Report: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- XML Report: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Exit Code Meaning:" >> $GITHUB_STEP_SUMMARY
          echo "- **0**: No security issues found" >> $GITHUB_STEP_SUMMARY
          echo "- **1**: Low risk security issues found" >> $GITHUB_STEP_SUMMARY
          echo "- **2**: Medium risk security issues found" >> $GITHUB_STEP_SUMMARY
          echo "- **3**: High risk security issues found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Job summary generated at run-time*" >> $GITHUB_STEP_SUMMARY
