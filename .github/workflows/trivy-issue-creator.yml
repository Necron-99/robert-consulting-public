name: 🔒 Trivy Issue Creator

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches: [main, staging]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-issues-from-trivy:
    name: 🔍 Create Issues from Trivy Findings
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: read
      issues: write

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 🔍 Get Code Scanning Alerts
        run: |
          echo "🔍 Fetching Code Scanning alerts..."
          gh api repos/${{ github.repository }}/code-scanning/alerts --jq '.[] | select(.state == "open")' > alerts.json
          echo "📊 Found $(jq length alerts.json) open alerts"

      - name: 🎯 Process High/Critical Findings
        run: |
          echo "🎯 Processing high and critical findings..."
          
          # Group alerts by rule and filter for high/critical
          jq -r '
            group_by(.rule.name) | 
            map(select(.[0].rule.severity == "CRITICAL" or .[0].rule.severity == "ERROR" or .[0].rule.severity == "WARNING")) |
            .[] | 
            {
              rule_name: .[0].rule.name,
              severity: .[0].rule.severity,
              count: length,
              tool: .[0].tool.name,
              description: .[0].rule.description
            }
          ' alerts.json > findings.json
          
          echo "📊 Found $(jq length findings.json) unique high/critical findings"

      - name: 🤖 Create Issues
        run: |
          echo "🤖 Creating Issues for findings..."
          
          if [ -f "findings.json" ] && [ "$(jq length findings.json)" -gt 0 ]; then
            jq -r '.[]' findings.json | while read -r finding; do
              rule_name=$(echo "$finding" | jq -r '.rule_name')
              severity=$(echo "$finding" | jq -r '.severity')
              count=$(echo "$finding" | jq -r '.count')
              tool=$(echo "$finding" | jq -r '.tool')
              description=$(echo "$finding" | jq -r '.description')
              
              # Check if issue already exists
              existing=$(gh issue list --search "in:title \"$rule_name\"" --state open --json number --jq '.[0].number // empty')
              
              if [ -z "$existing" ]; then
                echo "📝 Creating issue for: $rule_name ($severity)"
                
                # Create issue with simple body
                gh issue create \
                  --title "🔒 $severity: $rule_name" \
                  --body "**Severity:** $severity
**Tool:** $tool
**Occurrences:** $count

**Description:**
$description

**Action Required:**
- [ ] Review and fix security issue
- [ ] Test changes in staging
- [ ] Deploy to production

*Auto-created from Code Scanning alerts*" \
                  --label "security,$severity,$tool,automated" || echo "Failed to create issue for $rule_name"
              else
                echo "ℹ️ Issue already exists for $rule_name (#$existing)"
              fi
            done
          fi

      - name: 📊 Summary
        run: |
          echo "📊 Summary:"
          echo "==========="
          if [ -f "findings.json" ]; then
            echo "🔍 Total findings: $(jq length findings.json)"
            echo "🚨 Critical: $(jq '[.[] | select(.severity == "CRITICAL" or .severity == "ERROR")] | length' findings.json)"
            echo "⚠️ High: $(jq '[.[] | select(.severity == "WARNING")] | length' findings.json)"
          fi
          echo "📈 Open security issues: $(gh issue list --label "security" --state open --json number | jq length)"
